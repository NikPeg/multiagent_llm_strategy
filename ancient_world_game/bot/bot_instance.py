import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

from config.config import BOT_TOKEN, ADMIN_IDS
from .middlewares import setup_middlewares
from .handlers import register_all_handlers
from storage import setup_database, create_tables, check_database_connection
from utils.logger import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–ª–æ–≤–∞—Ä—å, —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π —Å –∏—Ö –æ–±—ä–µ–∫—Ç–∞–º–∏
handler_functions = {}

async def on_startup(dp: Dispatcher):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞

    Args:
        dp (Dispatcher): –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    setup_logger()
    logger.info("Bot starting...")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await setup_database()
        await create_tables()
        if await check_database_connection():
            logger.info("Database connection successful")
        else:
            logger.error("Database connection failed")
            return
    except Exception as e:
        logger.error(f"Database initialization error: {str(e)}")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    register_all_handlers(dp, ADMIN_IDS)
    logger.info("Handlers registered")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middlewares
    setup_middlewares(dp, ADMIN_IDS)
    logger.info("Middlewares set up")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                "üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
                f"–í–µ—Ä—Å–∏—è: 1.0.0\n"
                f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {asyncio.get_event_loop().time()}"
            )
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {str(e)}")

    logger.info("Bot started successfully")

async def on_shutdown(dp: Dispatcher):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

    Args:
        dp (Dispatcher): –î–∏—Å–ø–µ—Ç—á–µ—Ä –±–æ—Ç–∞
    """
    logger.info("Bot shutting down...")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                "üõë –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫."
            )
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id} about shutdown: {str(e)}")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await dp.storage.close()
    await dp.storage.wait_closed()
    logger.info("Storage closed")

    logger.info("Bot shutdown complete")

def setup_bot():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

    Returns:
        tuple: (Bot, Dispatcher) - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä—É—é—â–∏–π middleware
    dp.middleware.setup(LoggingMiddleware())

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    dp.register_on_startup(on_startup)
    dp.register_on_shutdown(on_shutdown)

    return bot, dp

def start_polling():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
    """
    logger.info("Starting bot in polling mode")
    from aiogram import executor

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    _, dispatcher = setup_bot()

    # –ó–∞–ø—É—Å–∫–∞–µ–º long polling
    executor.start_polling(
        dispatcher,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown
    )


# –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    start_polling()
