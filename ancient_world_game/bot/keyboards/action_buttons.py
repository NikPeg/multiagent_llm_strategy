from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.callback_data import CallbackData

# CallbackData –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
action_cb = CallbackData("action", "type", "target")

# CallbackData –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∫–∞–∑–∞–º–∏
order_cb = CallbackData("order", "action", "order_id")

def get_action_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏–≥—Ä–æ–∫–∞

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    markup = InlineKeyboardMarkup(row_width=1)

    markup.add(
        InlineKeyboardButton("üèπ –û—Ç–¥–∞—Ç—å –ø—Ä–∏–∫–∞–∑", callback_data=action_cb.new(type="new_order", target="none")),
        InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∫–∞–∑–æ–≤", callback_data=action_cb.new(type="history", target="none")),
        InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –æ —Å—Ç—Ä–∞–Ω–µ", callback_data=action_cb.new(type="report", target="none")),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=action_cb.new(type="back", target="main_menu"))
    )

    return markup

def get_order_confirmation_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–∫–∞–∑–∞

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
    """
    markup = InlineKeyboardMarkup(row_width=2)

    markup.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_action"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_action")
    )

    return markup

def get_action_suggestions_keyboard(suggestions):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–µ–π—Å—Ç–≤–∏–π

    Args:
        suggestions (list): –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    """
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
    for suggestion in suggestions:
        markup.add(KeyboardButton(suggestion))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    markup.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

    return markup

def get_action_categories_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–µ–π—Å—Ç–≤–∏–π

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    """
    markup = InlineKeyboardMarkup(row_width=2)

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    markup.row(
        InlineKeyboardButton("üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞", callback_data=action_cb.new(type="category", target="economy")),
        InlineKeyboardButton("‚öîÔ∏è –í–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ", callback_data=action_cb.new(type="category", target="military"))
    )

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    markup.row(
        InlineKeyboardButton("üèõ –†–µ–ª–∏–≥–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞", callback_data=action_cb.new(type="category", target="religion")),
        InlineKeyboardButton("‚öñÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–æ", callback_data=action_cb.new(type="category", target="governance"))
    )

    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    markup.row(
        InlineKeyboardButton("üèó –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", callback_data=action_cb.new(type="category", target="construction")),
        InlineKeyboardButton("üåê –í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞", callback_data=action_cb.new(type="category", target="diplomacy"))
    )

    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    markup.row(
        InlineKeyboardButton("üë• –û–±—â–µ—Å—Ç–≤–æ", callback_data=action_cb.new(type="category", target="society")),
        InlineKeyboardButton("üó∫ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è", callback_data=action_cb.new(type="category", target="territory"))
    )

    # –ü—è—Ç—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    markup.row(
        InlineKeyboardButton("üî¨ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data=action_cb.new(type="category", target="technology")),
        InlineKeyboardButton("‚ú® –î—Ä—É–≥–æ–µ", callback_data=action_cb.new(type="category", target="other"))
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=action_cb.new(type="back", target="main_menu"))
    )

    return markup

def get_order_history_keyboard(orders=None, page=0, page_size=5):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–∏–∫–∞–∑–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

    Args:
        orders (list): –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        page (int): –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        page_size (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–∏–∫–∞–∑–æ–≤
    """
    markup = InlineKeyboardMarkup(row_width=1)

    # –ï—Å–ª–∏ –ø—Ä–∏–∫–∞–∑—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    if orders:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (len(orders) + page_size - 1) // page_size

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * page_size
        end_idx = min(start_idx + page_size, len(orders))
        current_page_orders = orders[start_idx:end_idx]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∫–∞–∑–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for order in current_page_orders:
            order_id = order.get('id', 0)
            order_text = order.get('action_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–∫–∞–∑')

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–∫–∞–∑–∞
            if len(order_text) > 35:
                order_text = order_text[:32] + "..."

            markup.add(
                InlineKeyboardButton(
                    f"{order_text}",
                    callback_data=order_cb.new(action="view", order_id=order_id)
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        nav_buttons = []

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if page > 0:
            nav_buttons.append(
                InlineKeyboardButton(
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=action_cb.new(type="history_page", target=str(page-1))
                )
            )

        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    "‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                    callback_data=action_cb.new(type="history_page", target=str(page+1))
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if nav_buttons:
            markup.row(*nav_buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        markup.add(
            InlineKeyboardButton(
                f"üìÑ –°—Ç—Ä. {page+1}/{total_pages}",
                callback_data=action_cb.new(type="page_info", target="none")
            )
        )

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=action_cb.new(type="back", target="action_menu"))
    )

    return markup

def get_order_detail_keyboard(order_id):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–∫–∞–∑–∞

    Args:
        order_id (int): ID –ø—Ä–∏–∫–∞–∑–∞

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    """
    markup = InlineKeyboardMarkup(row_width=2)

    markup.row(
        InlineKeyboardButton(
            "üìä –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
            callback_data=order_cb.new(action="impact", order_id=order_id)
        ),
        InlineKeyboardButton(
            "üìù –ú–Ω–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞",
            callback_data=order_cb.new(action="opinion", order_id=order_id)
        )
    )

    markup.add(
        InlineKeyboardButton(
            "üèπ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–∏–∫–∞–∑",
            callback_data=order_cb.new(action="repeat", order_id=order_id)
        )
    )

    markup.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=action_cb.new(type="history", target="none"))
    )

    return markup

def get_quick_action_buttons():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è ReplyKeyboardMarkup

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    markup.row(
        KeyboardButton("üèπ –ù–æ–≤—ã–π –ø—Ä–∏–∫–∞–∑"),
        KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∫–∞–∑–æ–≤")
    )

    markup.row(
        KeyboardButton("üìä –û—Ç—á–µ—Ç –æ —Å—Ç—Ä–∞–Ω–µ"),
        KeyboardButton("üëë –ü—Ä–æ—Ñ–∏–ª—å")
    )

    markup.row(
        KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    )

    return markup

def get_suggestion_examples_keyboard(category=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –ø—Ä–∏–∫–∞–∑–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Args:
        category (str): –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∏–∫–∞–∑–æ–≤

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    """
    markup = InlineKeyboardMarkup(row_width=1)

    # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    examples = {
        "economy": [
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∞–±—Ä–∏–∫—É –≤ —Å—Ç–æ–ª–∏—Ü–µ",
            "–°–Ω–∏–∑–∏—Ç—å –Ω–∞–ª–æ–≥–∏ –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
            "–£–≤–µ–ª–∏—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏"
        ],
        "military": [
            "–£–≤–µ–ª–∏—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä–º–∏–∏",
            "–ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–æ—Ä—É–∂–µ–Ω–∏–µ",
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—É—é –≤–æ–µ–Ω–Ω—É—é –±–∞–∑—É"
        ],
        "religion": [
            "–û–±—ä—è–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫",
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ö—Ä–∞–º",
            "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –æ–±–º–µ–Ω —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏"
        ],
        "governance": [
            "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Å—É–¥–µ–±–Ω—É—é —Ä–µ—Ñ–æ—Ä–º—É",
            "–£—Å–∏–ª–∏—Ç—å –±–æ—Ä—å–±—É —Å –∫–æ—Ä—Ä—É–ø—Ü–∏–µ–π",
            "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ"
        ],
        "construction": [
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –º–æ—Å—Ç —á–µ—Ä–µ–∑ —Ä–µ–∫—É",
            "–ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ä–æ–∂–Ω—É—é —Å–µ—Ç—å",
            "–ù–∞—á–∞—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞"
        ],
        "diplomacy": [
            "–ó–∞–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–æ—é–∑ —Å —Å–æ—Å–µ–¥—è–º–∏",
            "–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É –≤—Ä–∞–∂–¥–µ–±–Ω–æ–º—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É",
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏—Å—Å–∏—é"
        ],
        "society": [
            "–£–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
            "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Ä–µ—Ñ–æ—Ä–º—É",
            "–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
        ],
        "territory": [
            "–û—Å–Ω–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∏—é",
            "–ê–Ω–Ω–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å–µ–¥–Ω—é—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é",
            "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é —Ä–µ—Ñ–æ—Ä–º—É —Ä–µ–≥–∏–æ–Ω–æ–≤"
        ],
        "technology": [
            "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –Ω–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä",
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–µ"
        ],
        "other": [
            "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫",
            "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–º–Ω–∏—Å—Ç–∏—é –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–Ω—ã—Ö",
            "–ù–∞—á–∞—Ç—å —Ç–∞–π–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ"
        ]
    }

    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∫–∞–∑–∞–Ω–∞ –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
    if category and category in examples:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
        for example in examples[category]:
            markup.add(
                InlineKeyboardButton(
                    example,
                    callback_data=action_cb.new(type="use_example", target=example[:50])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                )
            )
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã
        general_examples = [
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥",
            "–ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—Ä–º–∏—é",
            "–ü—Ä–æ–≤–µ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Ä–µ—Ñ–æ—Ä–º—É",
            "–ó–∞–∫–ª—é—á–∏—Ç—å —Å–æ—é–∑ —Å —Å–æ—Å–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–æ–π"
        ]

        for example in general_examples:
            markup.add(
                InlineKeyboardButton(
                    example,
                    callback_data=action_cb.new(type="use_example", target=example[:50])
                )
            )

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    markup.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=action_cb.new(type="back", target="categories"))
    )

    return markup

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—à–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
__all__ = [
    'get_action_keyboard',
    'get_order_confirmation_keyboard',
    'get_action_suggestions_keyboard',
    'get_action_categories_keyboard',
    'get_order_history_keyboard',
    'get_order_detail_keyboard',
    'get_quick_action_buttons',
    'get_suggestion_examples_keyboard',
    'action_cb',
    'order_cb'
]
