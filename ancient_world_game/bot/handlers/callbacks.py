from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
import logging

from commands import subscription_cb, process_subscription_callback
from admin_commands import admin_cb, process_admin_callback, stats_cb, show_stats
from db import update_user_subscription_status, get_user_by_telegram_id, toggle_feature

# Callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_cb = CallbackData("notification", "feature", "status")

# Callback –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_cb = CallbackData("settings", "action")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
def get_settings_keyboard(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user = get_user_by_telegram_id(user_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = InlineKeyboardMarkup(row_width=2)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if user:
        # –°—Ç–∞—Ç—É—Å—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        news_status = "‚úÖ –í–ö–õ" if user.get('notify_news', True) else "‚ùå –í–´–ö–õ"
        updates_status = "‚úÖ –í–ö–õ" if user.get('notify_updates', True) else "‚ùå –í–´–ö–õ"
        events_status = "‚úÖ –í–ö–õ" if user.get('notify_events', True) else "‚ùå –í–´–ö–õ"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        keyboard.add(
            InlineKeyboardButton(
                f"–ù–æ–≤–æ—Å—Ç–∏: {news_status}",
                callback_data=notification_cb.new(feature="notify_news", status="toggle")
            ),
            InlineKeyboardButton(
                f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: {updates_status}",
                callback_data=notification_cb.new(feature="notify_updates", status="toggle")
            ),
            InlineKeyboardButton(
                f"–°–æ–±—ã—Ç–∏—è: {events_status}",
                callback_data=notification_cb.new(feature="notify_events", status="toggle")
            )
        )

    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=settings_cb.new(action="back")),
        InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data=settings_cb.new(action="close"))
    )

    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /settings
async def cmd_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id

    await message.answer(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å.\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
        reply_markup=get_settings_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def process_callback(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext, admin_ids: list):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ callback
        callback_name = callback_query.data.split(":")[0]

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        if callback_name == subscription_cb.prefix:
            await process_subscription_callback(callback_query, callback_data)

        elif callback_name == admin_cb.prefix:
            await process_admin_callback(callback_query, callback_data, state, admin_ids)

        elif callback_name == stats_cb.prefix:
            await show_stats(callback_query, callback_data)

        elif callback_name == notification_cb.prefix:
            await process_notification_callback(callback_query, callback_data)

        elif callback_name == settings_cb.prefix:
            await process_settings_callback(callback_query, callback_data)

        else:
            logging.warning(f"Unknown callback: {callback_query.data}")
            await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        logging.error(f"Error processing callback: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def process_notification_callback(callback_query: types.CallbackQuery, callback_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback_query.from_user.id
    feature = callback_data["feature"]
    status = callback_data["status"]

    if status == "toggle":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–∏
        new_status = toggle_feature(user_id, feature)

        feature_names = {
            "notify_news": "–Ω–æ–≤–æ—Å—Ç–µ–π",
            "notify_updates": "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π",
            "notify_events": "—Å–æ–±—ã—Ç–∏–π"
        }

        feature_name = feature_names.get(feature, feature)
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"

        await callback_query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {feature_name} {status_text}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await callback_query.message.edit_reply_markup(
            reply_markup=get_settings_keyboard(user_id)
        )
    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def process_settings_callback(callback_query: types.CallbackQuery, callback_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    action = callback_data["action"]

    if action == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
        await callback_query.message.edit_text(
            "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard(callback_query.from_user.id)
        )

    elif action == "close":
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await callback_query.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞
def get_main_keyboard(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user_by_telegram_id(user_id)
    is_subscribed = user.get('is_subscribed', False) if user else False

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
    if is_subscribed:
        sub_button = InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=subscription_cb.new(action="unsubscribe"))
    else:
        sub_button = InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data=subscription_cb.new(action="subscribe"))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.add(
        sub_button,
        InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=settings_cb.new(action="settings")),
        InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data=settings_cb.new(action="help"))
    )

    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ main_menu
async def cmd_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    user_id = message.from_user.id

    await message.answer(
        "üîç *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
async def process_help_button(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    await callback_query.message.edit_text(
        "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "*/start* - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "*/menu* - –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "*/help* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "*/settings* - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "*/subscribe* - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "*/unsubscribe* - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "*/status* - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu",
        parse_mode="Markdown"
    )
    await callback_query.answer()
