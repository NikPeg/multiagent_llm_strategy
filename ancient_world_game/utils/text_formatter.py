"""
text_formatter.py - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–æ—Ç–µ.
"""

from typing import Dict, List, Any, Optional
import textwrap
import html
import re


def format_country_stats(stats: Dict[str, int]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        stats: –°–ª–æ–≤–∞—Ä—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤–∏–¥–∞ {"—ç–∫–æ–Ω–æ–º–∏–∫–∞": 3, "–≤–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ": 4, ...}

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    """
    result = "üìä <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞:</b>\n\n"

    stat_emojis = {
        "—ç–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞",
        "–≤–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ": "‚öîÔ∏è",
        "—Ä–µ–ª–∏–≥–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞": "üèõÔ∏è",
        "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–æ": "üëë",
        "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞": "üèóÔ∏è",
        "–≤–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞": "üåê",
        "–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è": "üë•",
        "—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è": "üó∫Ô∏è",
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å": "‚öôÔ∏è"
    }

    for stat, value in stats.items():
        emoji = stat_emojis.get(stat.lower(), "üìã")
        stars = "‚òÖ" * value + "‚òÜ" * (5 - value)
        result += f"{emoji} <b>{stat.capitalize()}:</b> {stars} ({value}/5)\n"

    return result


def format_country_description(name: str, description: str, problems: Optional[List[str]] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã.

    Args:
        name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        description: –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
        problems: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    """
    result = f"üèõÔ∏è <b>{html.escape(name)}</b>\n\n"
    result += f"{html.escape(description)}\n"

    if problems and len(problems) > 0:
        result += "\n<b>–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
        for i, problem in enumerate(problems, 1):
            result += f"  {i}. {html.escape(problem)}\n"

    return result


def format_project_status(project_name: str, progress: int, years_left: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞.

    Args:
        project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        progress: –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (0-100)
        years_left: –û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø—Ä–æ–µ–∫—Ç–∞
    """
    progress_bar = generate_progress_bar(progress)
    return f"üèóÔ∏è <b>{html.escape(project_name)}</b>: {progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å {years_left} –ª–µ—Ç\n{progress_bar}"


def format_event_message(event_text: str, severity: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏.

    Args:
        event_text: –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è
        severity: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ("good", "neutral", "bad", "very_good", "very_bad")

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏
    """
    emojis = {
        "very_good": "üéâ",
        "good": "‚ú®",
        "neutral": "üì¢",
        "bad": "‚ö†Ô∏è",
        "very_bad": "üî•"
    }

    emoji = emojis.get(severity, "üì¢")

    return f"{emoji} <b>–°–û–ë–´–¢–ò–ï</b> {emoji}\n\n{html.escape(event_text)}"


def format_divine_message(message: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ (–æ—Ç –∞–¥–º–∏–Ω–∞).

    Args:
        message: –¢–µ–∫—Å—Ç –ø–æ—Å–ª–∞–Ω–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ
    """
    return f"‚òÄÔ∏è <b>–ë–û–ñ–ï–°–¢–í–ï–ù–ù–û–ï –ó–ù–ê–ú–ï–ù–ò–ï</b> ‚òÄÔ∏è\n\n<i>{html.escape(message)}</i>"


def format_aspect_details(aspect: str, details: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Å–ø–µ–∫—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞.

    Args:
        aspect: –ù–∞–∑–≤–∞–Ω–∏–µ –∞—Å–ø–µ–∫—Ç–∞
        details: –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å–ø–µ–∫—Ç–µ
    """
    aspect_emojis = {
        "—ç–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞",
        "–≤–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ": "‚öîÔ∏è",
        "—Ä–µ–ª–∏–≥–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞": "üèõÔ∏è",
        "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–æ": "üëë",
        "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞": "üèóÔ∏è",
        "–≤–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞": "üåê",
        "–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è": "üë•",
        "—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è": "üó∫Ô∏è",
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å": "‚öôÔ∏è"
    }

    emoji = aspect_emojis.get(aspect.lower(), "üìã")
    return f"{emoji} <b>{aspect.upper()}</b> {emoji}\n\n{html.escape(details)}"


def generate_progress_bar(percentage: int, length: int = 10) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä.

    Args:
        percentage: –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (0-100)
        length: –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    """
    filled = int(percentage / 100 * length)
    return "‚ñì" * filled + "‚ñë" * (length - filled)


def truncate_text(text: str, max_length: int = 4000) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞

    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text

    return text[:max_length-3] + "..."


def format_war_report(attacker: str, defender: str, result: str, details: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –≤–æ–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö.

    Args:
        attacker: –ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ç–∞–∫—É—é—â–µ–π —Å—Ç—Ä–∞–Ω—ã
        defender: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä–æ–Ω—è—é—â–µ–π—Å—è —Å—Ç—Ä–∞–Ω—ã
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        details: –î–µ—Ç–∞–ª–∏ —Å—Ä–∞–∂–µ–Ω–∏—è

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≤–æ–π–Ω–µ
    """
    return (
        f"‚öîÔ∏è <b>–í–û–ï–ù–ù–´–ô –ö–û–ù–§–õ–ò–ö–¢</b> ‚öîÔ∏è\n\n"
        f"<b>{html.escape(attacker)}</b> ‚öîÔ∏è <b>{html.escape(defender)}</b>\n\n"
        f"<b>–ò—Å—Ö–æ–¥:</b> {html.escape(result)}\n\n"
        f"<b>–î–µ—Ç–∞–ª–∏:</b>\n{html.escape(details)}"
    )


def format_help_message() -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
    """
    return (
        "<b>üìú –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–≥—Ä–µ '–î—Ä–µ–≤–Ω–∏–π –ú–∏—Ä'</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/who - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ\n"
        "/who @username - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á—É–∂–æ–π —Å—Ç—Ä–∞–Ω–µ\n"
        "/future - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ –±—É–¥—É—â–µ–º –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã\n"
        "/goal - –ó–∞–±–∏—Ç—å –≥–æ–ª (–∏–≥—Ä–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞)\n"
        "/stat - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–±–∏—Ç—ã—Ö –≥–æ–ª–æ–≤\n\n"
        "<b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–æ–π —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–∫–∞–∑–æ–≤\n"
        "‚Ä¢ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞\n"
        "‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n"
        "‚Ä¢ –†–µ–∞–≥–∏—Ä—É–π—Ç–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n\n"
        "<b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    )


def clean_text_for_storage(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ.

    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    text = re.sub(r'\s+', ' ', text.strip())
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ HTML
    text = html.unescape(text)
    return text
