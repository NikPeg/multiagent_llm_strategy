import asyncio
import logging
import aioschedule as schedule
from datetime import datetime, time, timedelta
import random
from typing import Dict, List, Callable, Coroutine, Any

from config.config import ADMIN_IDS
from .daily_update import process_daily_update
from .projects_progress import update_projects_progress
from utils.logger import get_logger
from db import get_active_players

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
scheduled_tasks: Dict[str, schedule.Job] = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
random_tasks: Dict[str, Dict] = {}

async def setup_scheduler(bot):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    logger.info("Setting up scheduler...")

    # –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    schedule.clear()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞ (—Å–º–µ–Ω–∞ –≥–æ–¥–∞) –≤ 00:00
    scheduled_tasks['daily_update'] = schedule.every().day.at("00:00").do(
        lambda: asyncio.create_task(process_daily_update(bot))
    )
    logger.info("Scheduled daily update at 00:00")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    for hour in [0, 4, 8, 12, 16, 20]:
        task_name = f'projects_update_{hour}'
        scheduled_tasks[task_name] = schedule.every().day.at(f"{hour:02d}:00").do(
            lambda: asyncio.create_task(update_projects_progress(bot))
        )
    logger.info("Scheduled projects updates every 4 hours")

    # –†–∞—Å—Å—ã–ª–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å
    setup_random_events(bot)
    logger.info("Scheduled random events")

    # –ó–∞–ø—É—Å–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(scheduler_loop())

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    for admin_id in ADMIN_IDS:
        try:
            daily_next_run = scheduled_tasks['daily_update'].next_run
            next_run_str = daily_next_run.strftime("%Y-%m-%d %H:%M:%S") if daily_next_run else "Not scheduled"
            await bot.send_message(
                admin_id,
                f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏—Ä–∞: {next_run_str}\n"
                f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤: –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞\n"
                f"–°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {len(random_tasks)} –≤ –¥–µ–Ω—å"
            )
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id} about scheduler setup: {str(e)}")

async def scheduler_loop():
    """
    –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    """
    logger.info("Starting scheduler loop")
    while True:
        await schedule.run_pending()
        await asyncio.sleep(1)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

def setup_random_events(bot):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    current_day = datetime.now().date()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç 3 –¥–æ 7 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ –¥–µ–Ω—å
    num_events = random.randint(3, 7)

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞—á–∏
    random_tasks.clear()

    # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    for i in range(num_events):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É 9:00 –∏ 21:00
        hour = random.randint(9, 21)
        minute = random.randint(0, 59)
        event_time = time(hour, minute)

        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Å–æ–±—ã—Ç–∏—è
        event_name = f"random_event_{i}"

        # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        scheduled_tasks[event_name] = schedule.every().day.at(f"{hour:02d}:{minute:02d}").do(
            lambda: asyncio.create_task(trigger_random_event(bot))
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        random_tasks[event_name] = {
            "time": event_time,
            "type": random.choice(["natural_disaster", "diplomatic_incident", "economic_change", "cultural_event"]),
            "scheduled_for": datetime.combine(current_day, event_time)
        }

    logger.info(f"Set up {num_events} random events for today")

async def trigger_random_event(bot):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        players = await get_active_players()

        if not players:
            logger.warning("No active players found for random event")
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        event_type = random.choice(["natural_disaster", "diplomatic_incident", "economic_change", "cultural_event"])

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç LLM (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ daily_update.py)
        from .daily_update import generate_random_event
        event_data = await generate_random_event(event_type)

        if not event_data:
            logger.error("Failed to generate random event")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º
        for player in players:
            try:
                user_id = player.get('user_id')
                country_name = player.get('country_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞')

                # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
                event_impact = await personalize_event_impact(event_data, player)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = (
                    f"üåç **–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ!**\n\n"
                    f"*{event_data['title']}*\n\n"
                    f"{event_data['description']}\n\n"
                    f"**–í–ª–∏—è–Ω–∏–µ –Ω–∞ {country_name}:**\n{event_impact['description']}"
                )

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
                if event_impact.get('stats_changes'):
                    message_text += "\n\n**–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:**\n"
                    for stat, value in event_impact['stats_changes'].items():
                        direction = "üîº" if value > 0 else "üîΩ"
                        message_text += f"{direction} {stat.capitalize()}: {value:+.1f}\n"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(user_id, message_text)

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º —Å—Ç—Ä–∞–Ω—ã
                if event_impact.get('stats_changes'):
                    from db import update_player_stats
                    await update_player_stats(user_id, **event_impact['stats_changes'])

            except Exception as e:
                logger.error(f"Failed to send random event to player {player.get('user_id')}: {str(e)}")

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        logger.info(f"Triggered random event '{event_data['title']}' for {len(players)} players")

    except Exception as e:
        logger.error(f"Error in trigger_random_event: {str(e)}")

async def personalize_event_impact(event_data, player):
    """
    –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω—É

    Args:
        event_data (dict): –î–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏
        player (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ –∏ –µ–≥–æ —Å—Ç—Ä–∞–Ω–µ

    Returns:
        dict: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π LLM –∏–∑ –º–æ–¥—É–ª—è ai
        from ai import generate_event_impact

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ
        country_name = player.get('country_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞')

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é LLM
        impact = await generate_event_impact(
            event_type=event_data['type'],
            event_title=event_data['title'],
            event_description=event_data['description'],
            country_name=country_name,
            player_stats=player
        )

        return impact

    except Exception as e:
        logger.error(f"Error personalizing event impact: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            "description": "–í–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.",
            "stats_changes": {}
        }

async def schedule_task(task_name: str, coroutine_func: Callable[..., Coroutine], delay_seconds: int, *args, **kwargs):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

    Args:
        task_name (str): –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∑–∞–¥–∞—á–∏
        coroutine_func (Callable): –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        delay_seconds (int): –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∫–æ—Ä—É—Ç–∏–Ω—É
    """
    logger.info(f"Scheduling task '{task_name}' to run in {delay_seconds} seconds")

    async def delayed_task():
        await asyncio.sleep(delay_seconds)
        try:
            await coroutine_func(*args, **kwargs)
            logger.info(f"Task '{task_name}' completed successfully")
        except Exception as e:
            logger.error(f"Error executing task '{task_name}': {str(e)}")

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
    task = asyncio.create_task(delayed_task())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    return task

async def force_run_task(task_name: str, bot):
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ –∏–º–µ–Ω–∏

    Args:
        task_name (str): –ò–º—è –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    Returns:
        bool: True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    logger.info(f"Force running task: {task_name}")

    if task_name == "daily_update":
        asyncio.create_task(process_daily_update(bot))
        return True

    elif task_name == "projects_progress":
        asyncio.create_task(update_projects_progress(bot))
        return True

    elif task_name == "random_event":
        asyncio.create_task(trigger_random_event(bot))
        return True

    else:
        logger.warning(f"Unknown task name: {task_name}")
        return False

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = [
    'setup_scheduler',
    'scheduler_loop',
    'schedule_task',
    'force_run_task'
]
