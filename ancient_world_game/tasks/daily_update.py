import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import random

from storage import (
    get_all_players,
    update_player_stats,
    increment_game_year,
    get_game_year,
    save_yearly_history,
    update_player_resources,
    get_player_data,
    add_notification
)

from ai import (
    generate_yearly_summary,
    generate_country_development,
    analyze_world_situation,
    generate_random_event_description
)

from config.config import ADMIN_IDS
from config.game_constants import STATS
from utils.logger import get_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger(__name__)

async def process_daily_update(bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞ (—Å–º–µ–Ω–∞ –≥–æ–¥–∞)

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    logger.info("Starting daily update process (year change)")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–≤–æ–π –≥–æ–¥ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ
        current_year = await get_game_year()
        new_year = current_year + 1
        await increment_game_year()

        logger.info(f"Game year changed from {current_year} to {new_year}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        players = await get_all_players(active_only=True)

        if not players:
            logger.warning("No active players found for daily update")
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!\n\n"
                    f"–ò–≥—Ä–æ–≤–æ–π –≥–æ–¥: {current_year} ‚Üí {new_year}\n"
                    f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(players)}\n\n"
                    f"–≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id} about daily update: {str(e)}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ–±–∑–æ—Ä –º–∏—Ä–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é LLM
        world_situation = await analyze_world_situation(players, new_year)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –º–∏—Ä–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
        await save_yearly_history(new_year, world_situation)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º
        for player in players:
            try:
                # –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä–æ–∫–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
                user_id = player.get('user_id')
                country_name = player.get('country_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞')

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä–∞–Ω—ã –∑–∞ –≥–æ–¥ —Å –ø–æ–º–æ—â—å—é LLM
                country_development = await generate_country_development(player, new_year)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞–Ω—ã
                stats_changes = country_development.get('stats_changes', {})
                if stats_changes:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ update_player_stats
                    stats_updates = {}
                    for stat in STATS:
                        if stat in stats_changes:
                            stats_updates[stat] = stats_changes[stat]

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
                    await update_player_stats(user_id, **stats_updates)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã —Å—Ç—Ä–∞–Ω—ã
                resources_changes = country_development.get('resources_changes', {})
                if resources_changes:
                    await update_player_resources(user_id, resources_changes)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
                yearly_summary = await generate_yearly_summary(
                    country_name=country_name,
                    year=new_year,
                    player_stats=player,
                    world_situation=world_situation,
                    country_development=country_development
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –∏–≥—Ä–æ–∫—É
                message_text = (
                    f"üìÖ **–ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –≥–æ–¥: {new_year}!**\n\n"
                    f"*–ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –¥–ª—è {country_name}*\n\n"
                    f"{yearly_summary['summary']}\n\n"
                )

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
                if stats_changes:
                    message_text += "**–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:**\n"
                    for stat in STATS:
                        if stat in stats_changes and stats_changes[stat] != 0:
                            value = stats_changes[stat]
                            direction = "üîº" if value > 0 else "üîΩ"
                            message_text += f"{direction} {stat.capitalize()}: {value:+.1f}\n"
                    message_text += "\n"

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
                if resources_changes:
                    message_text += "**–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤:**\n"
                    for resource, value in resources_changes.items():
                        direction = "üîº" if value > 0 else "üîΩ"
                        message_text += f"{direction} {resource.capitalize()}: {value:+}\n"
                    message_text += "\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏—Ä–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
                message_text += (
                    f"**–ú–∏—Ä–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:**\n"
                    f"{world_situation['summary'][:300]}...\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /world –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞ –º–∏—Ä–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(user_id, message_text)

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await add_notification(
                    user_id=user_id,
                    title=f"–ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç {new_year}",
                    content=message_text,
                    notification_type="yearly_report"
                )

                # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.5)

            except Exception as e:
                logger.error(f"Error processing daily update for player {player.get('user_id')}: {str(e)}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                    f"–ù–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –≥–æ–¥: {new_year}\n"
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {len(players)}\n\n"
                    f"–ú–∏—Ä–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:\n{world_situation['summary'][:200]}..."
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id} about daily update completion: {str(e)}")

        logger.info(f"Daily update completed successfully. New game year: {new_year}")

    except Exception as e:
        logger.error(f"Error in daily update process: {str(e)}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!\n\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                )
            except Exception as ex:
                logger.error(f"Failed to notify admin {admin_id} about error: {str(ex)}")

async def generate_random_event(event_type: Optional[str] = None) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å –ø–æ–º–æ—â—å—é LLM

    Args:
        event_type (str, optional): –¢–∏–ø —Å–æ–±—ã—Ç–∏—è. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ.

    Returns:
        Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –æ —Å–ª—É—á–∞–π–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
    """
    # –ï—Å–ª–∏ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ
    if not event_type:
        event_type = random.choice([
            "natural_disaster",  # –ü—Ä–∏—Ä–æ–¥–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ
            "diplomatic_incident",  # –î–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç
            "economic_change",  # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            "cultural_event",  # –ö—É–ª—å—Ç—É—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            "technological_breakthrough"  # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ä—ã–≤
        ])

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–≤–æ–π –≥–æ–¥
        game_year = await get_game_year()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –ø–æ–º–æ—â—å—é LLM
        event_description = await generate_random_event_description(event_type, game_year)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏
        return {
            "type": event_type,
            "title": event_description.get("title", "–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"),
            "description": event_description.get("description", "–ü—Ä–æ–∏–∑–æ—à–ª–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ."),
            "year": game_year
        }

    except Exception as e:
        logger.error(f"Error generating random event: {str(e)}")
        return {
            "type": event_type,
            "title": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ",
            "description": "–ü—Ä–æ–∏–∑–æ—à–ª–æ —Å–æ–±—ã—Ç–∏–µ, –Ω–æ –¥–µ—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.",
            "year": await get_game_year()
        }

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
__all__ = [
    'process_daily_update',
    'generate_random_event'
]
