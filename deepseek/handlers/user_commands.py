from aiogram import types, Router
from aiogram.filters import Command

from utils import answer_html
from database import *
from aiogram.fsm.context import FSMContext
from .fsm import SendMessageFSM

router = Router()

@router.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id

    if await user_exists(user_id):
        country_desc = await get_user_country_desc(user_id)
        help_text = (
            "üëë <b>–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è, –≤–ª–∞—Å—Ç–∏—Ç–µ–ª—å!</b>\n\n"
            "–¢—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –ª–µ—Ç–æ–ø–∏—Å—å —Å–≤–æ–µ–π –¥–µ—Ä–∂–∞–≤—ã –≤ –º–∏—Ä–µ, –≥–¥–µ –ø–µ—Ä–µ–ø–ª–µ—Ç–∞—é—Ç—Å—è –≤–æ–π–Ω—ã, –Ω–∞—É–∫–∞, –º–∞–≥–∏—è –∏ —Å—É–¥—å–±—ã –Ω–∞—Ä–æ–¥–æ–≤.\n"
            "–í–ª–∞—Å—Ç—å —Ç–≤–æ—è ‚Äî –∑–∞–∫–æ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω—ã, –∞—Ä–º–∏–∏, —Ä–µ–º—ë—Å–µ–ª –∏ –¥—É—Ö–æ–≤–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π.\n"
            "–¢—ã –≤–æ–ª–µ–Ω –≤–æ–∑–≤—ã—Å–∏—Ç—å —Å–≤–æ–π –Ω–∞—Ä–æ–¥, –ø–æ–¥—á–∏–Ω–∏—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –∏–ª–∏ –ø—Ä–∏–Ω–µ—Å—Ç–∏ —Å—á–∞—Å—Ç—å–µ —Å–≤–æ–∏–º –ø–æ–¥–¥–∞–Ω–Ω—ã–º.\n\n"
            f"<b>–¢–≤–æ—ë –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ —Å–µ–π—á–∞—Å:</b>\n{country_desc or '(–µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)'}\n\n"
            "üìú <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–≤–∏—Ç–∫–∏:</b>\n"
            "/new ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≥–ª–∞–≤—É —Å–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏\n"
            "/send <—Å—Ç—Ä–∞–Ω–∞> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ –∏–Ω–æ–º—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É\n"
            "/reset_country ‚Äî –∑–∞–±—ã—Ç—å –ø—Ä–µ–∂–Ω–µ–µ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Ü–∞—Ä—Å—Ç–≤–æ\n"
            "\n–û–±—ä—è–≤–ª—è–π –ø—Ä–∏–∫–∞–∑—ã, –≤–æ–ø—Ä–æ—à–∞–π –æ —Å—É–¥—å–±–µ –∏–ª–∏ —Å–æ–≤–µ—Ä—à–∏ –¥–µ—è–Ω–∏–µ ‚Äî —Ç—ã —Å–∞–º —Ç–≤–æ—Ä–∏—à—å —Å–≤–æ—é –ª–µ–≥–µ–Ω–¥—É!"
        )
        await answer_html(message, help_text)
        return

    await clear_history(user_id)
    await clear_user_aspects(user_id)
    await set_user_country(user_id, None)
    await set_user_country_desc(user_id, None)
    await set_aspect_index(user_id, None)
    await answer_html(
        message,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–ª–µ–≤—É—é –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É —ç–ø–æ—Ö–∏ –¥—Ä–µ–≤–Ω–µ–≥–æ –º–∏—Ä–∞!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω—ã</b>:"
    )


@router.message(Command("new"))
async def new_chat(message: types.Message):
    user_id = message.from_user.id
    await clear_history(user_id)
    await answer_html(message, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω!‚öîÔ∏è")

def format_ancient_letter(sender_country: str, text: str) -> str:
    return (
        f"üìú –ö –≤–æ—Ä–æ—Ç–∞–º –≤–∞—à–µ–≥–æ –¥–≤–æ—Ä—Ü–∞ —è–≤–∏–ª—Å—è –≥–ª–∞—à–∞—Ç–∞–π –∏–∑ –¥–µ—Ä–∂–∞–≤—ã {sender_country}!\n\n"
        f"–ü–µ—Ä–µ–¥–∞–µ—Ç –≤–∞–º —Å–≤–∏—Ç–æ–∫ —Å –ø–æ—Å–ª–∞–Ω–∏–µ–º:\n\n"
        f"{text}"
    )

@router.message(Command("send"))
async def cmd_send(message: types.Message, state: FSMContext):
    args = message.text.split(maxsplit=1)[1:]
    if args:
        country = args[0].strip()
        recipient_user_id = await get_user_id_by_country(country)
        if not recipient_user_id:
            await message.answer(f"–°—Ç—Ä–∞–Ω–∞ '{country}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã.")
            await state.set_state(SendMessageFSM.waiting_for_country)
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω—É –∏ –∂–¥–µ–º —Ç–µ–∫—Å—Ç
        await state.update_data(country=country)
        await state.set_state(SendMessageFSM.waiting_for_text)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–∞–Ω–∏—è –¥–ª—è –¥–µ—Ä–∂–∞–≤—ã '{country}':")
    else:
        example_country = await get_random_country_name()
        if example_country:
            await message.answer(f"–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /send {example_country}")
        else:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã. –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.")
        await state.set_state(SendMessageFSM.waiting_for_country)

@router.message(SendMessageFSM.waiting_for_country)
async def ask_country(message: types.Message, state: FSMContext):
    country = message.text.strip()
    recipient_user_id = await get_user_id_by_country(country)
    if not recipient_user_id:
        await message.answer(f"–°—Ç—Ä–∞–Ω–∞ '{country}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(country=country)
    await state.set_state(SendMessageFSM.waiting_for_text)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–∞–Ω–∏—è –¥–ª—è –¥–µ—Ä–∂–∞–≤—ã '{country}':")

@router.message(SendMessageFSM.waiting_for_text)
async def send_letter(message: types.Message, state: FSMContext):
    data = await state.get_data()
    country = data.get("country")
    recipient_user_id = await get_user_id_by_country(country)
    if not recipient_user_id:
        await message.answer(f"–°—Ç—Ä–∞–Ω–∞ '{country}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        await state.clear()
        return
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_country = await get_country_name_by_user_id(message.from_user.id)
    if recipient_user_id == message.from_user.id:
        await message.answer("–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        await state.clear()
        return

    text = message.text.strip()
    send_text = format_ancient_letter(sender_country, text)
    try:
        await message.bot.send_message(recipient_user_id, send_text)
        await message.answer("–ü–æ—Å–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é (–æ–Ω –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞).")
    await state.clear()

def register(dp):
    dp.include_router(router)
