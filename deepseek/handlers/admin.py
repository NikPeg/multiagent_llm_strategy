from aiogram import types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import ADMIN_CHAT_ID
from database import (
    get_all_active_countries,
    get_user_id_by_country,
    get_user_aspect,
    set_user_aspect,
)
from utils import answer_html, send_html, stars_to_bold
from .fsm import EditAspect
from game import ASPECTS

router = Router()

@router.message(Command("info"))
async def info(message: types.Message):
    if message.chat.id != ADMIN_CHAT_ID:
        await answer_html(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    params = message.text.split(maxsplit=1)[1:]
    args = params[0].split() if params else []

    countries = await get_all_active_countries()
    if not countries:
        await answer_html(message, "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        return

    countries_dict = {}
    for country_tuple in countries:
        user_id, country_name, country_desc, *aspect_values = country_tuple
        countries_dict[country_name.strip().lower()] = {
            "user_id": user_id,
            "country_name": country_name,
            "country_desc": country_desc,
            "aspects": aspect_values
        }

    aspect_labels = {a[0]: a[1] for a in ASPECTS}
    aspect_codes = list(aspect_labels.keys())

    # HELP
    if args and args[0].lower() in ("help", "—Å–ø—Ä–∞–≤–∫–∞", "?"):
        help_text = (
                "<b>/info</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω –∏ –∞—Å–ø–µ–∫—Ç–æ–≤\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "/info ‚Äî –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã –∏ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã\n"
                "/info <i>—Å—Ç—Ä–∞–Ω–∞</i> ‚Äî –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –ø–æ —Å—Ç—Ä–∞–Ω–µ\n"
                "/info <i>–∞—Å–ø–µ–∫—Ç</i> ‚Äî —ç—Ç–æ—Ç –∞—Å–ø–µ–∫—Ç –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º\n"
                "/info <i>—Å—Ç—Ä–∞–Ω–∞</i> <i>–∞—Å–ø–µ–∫—Ç</i> ‚Äî –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Å–ø–µ–∫—Ç —Å—Ç—Ä–∞–Ω—ã\n\n"
                "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã –∞—Å–ø–µ–∫—Ç–æ–≤:</b>\n" +
                "\n".join(f"<b>{code}</b>: {aspect_labels[code]}" for code in aspect_codes)
        )
        await send_html(message.bot, ADMIN_CHAT_ID, help_text)
        return

    if not args:
        # –í—Å–µ —Å—Ç—Ä–∞–Ω—ã –∏ –∏—Ö –∞—Å–ø–µ–∫—Ç—ã
        for country_tuple in countries:
            user_id, country_name, country_desc, *aspect_values = country_tuple
            await send_html(
                message.bot,
                ADMIN_CHAT_ID,
                f"üó∫ <b>–°—Ç—Ä–∞–Ω–∞:</b> {country_name} (ID: {user_id})"
            )
            await send_html(
                message.bot,
                ADMIN_CHAT_ID,
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{country_desc or '(–ù–µ—Ç)'}"
            )
            for (code, label, _), value in zip(ASPECTS, aspect_values):
                if value and value.strip():
                    await send_html(
                        message.bot,
                        ADMIN_CHAT_ID,
                        f"<b>{label}</b>:\n{stars_to_bold(value)}"
                    )
        return

    if len(args) == 1:
        arg = args[0].lower()
        if arg in aspect_labels:
            idx = aspect_codes.index(arg)
            for country_tuple in countries:
                country_name = country_tuple[1]
                user_id = country_tuple[0]
                aspect_value = country_tuple[3 + idx]
                if aspect_value and aspect_value.strip():
                    await send_html(
                        message.bot, ADMIN_CHAT_ID,
                        f"<b>{country_name}</b> (ID: {user_id}):\n<b>{aspect_labels[arg]}</b>:\n{stars_to_bold(aspect_value)}"
                    )
            return
        if arg in countries_dict:
            c = countries_dict[arg]
            await send_html(
                message.bot,
                ADMIN_CHAT_ID,
                f"üó∫ <b>–°—Ç—Ä–∞–Ω–∞:</b> {c['country_name']} (ID: {c['user_id']})"
            )
            await send_html(
                message.bot,
                ADMIN_CHAT_ID,
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{c['country_desc'] or '(–ù–µ—Ç)'}"
            )
            for (code, label, _), value in zip(ASPECTS, c["aspects"]):
                if value and value.strip():
                    await send_html(
                        message.bot, ADMIN_CHAT_ID, f"<b>{label}:</b>\n{stars_to_bold(value)}"
                    )
            return
        await answer_html(message, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ —Å—Ç—Ä–∞–Ω—ã, –Ω–∏ –∞—Å–ø–µ–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.")
        return

    if len(args) == 2:
        country = args[0].lower()
        aspect = args[1].lower()
        if country not in countries_dict:
            await answer_html(message, "–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        if aspect not in aspect_labels:
            await answer_html(message, "–ê—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        idx = aspect_codes.index(aspect)
        value = countries_dict[country]["aspects"][idx]
        label = aspect_labels[aspect]
        if value and value.strip():
            await send_html(
                message.bot,
                ADMIN_CHAT_ID,
                f"<b>{label}</b> –¥–ª—è —Å—Ç—Ä–∞–Ω—ã <b>{countries_dict[country]['country_name']}</b>:\n{stars_to_bold(value)}"
            )
        else:
            await send_html(
                message.bot,
                ADMIN_CHAT_ID,
                f"–ê—Å–ø–µ–∫—Ç <b>{label}</b> –¥–ª—è —Å—Ç—Ä–∞–Ω—ã <b>{countries_dict[country]['country_name']}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
        return

    await answer_html(
        message,
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –§–æ—Ä–º–∞—Ç—ã:\n/info [—Å—Ç—Ä–∞–Ω–∞]\n/info [–∞—Å–ø–µ–∫—Ç]\n/info [—Å—Ç—Ä–∞–Ω–∞] [–∞—Å–ø–µ–∫—Ç]\n\n"
        "–î–ª—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏—Ç–µ /info help"
    )

@router.message(Command("edit"))
async def admin_edit(message: types.Message, state: FSMContext):
    if message.chat.id != ADMIN_CHAT_ID:
        await answer_html(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text.split(maxsplit=1)[1:]
    if not args:
        await answer_html(message, "–§–æ—Ä–º–∞—Ç: /edit <—Å—Ç—Ä–∞–Ω–∞> <–∞—Å–ø–µ–∫—Ç>")
        return
    parts = args[0].split()
    if len(parts) != 2:
        await answer_html(message, "–§–æ—Ä–º–∞—Ç: /edit <—Å—Ç—Ä–∞–Ω–∞> <–∞—Å–ø–µ–∫—Ç>")
        return

    country_name = parts[0].strip()
    aspect_code = parts[1].strip()
    user_id = await get_user_id_by_country(country_name)
    if not user_id:
        await answer_html(message, f'–°—Ç—Ä–∞–Ω–∞ "{country_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return

    if aspect_code not in [a[0] for a in ASPECTS]:
        await answer_html(message, f'–ê—Å–ø–µ–∫—Ç "{aspect_code}" –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    current_value = await get_user_aspect(user_id, aspect_code)
    label = dict((a[0], a[1]) for a in ASPECTS)[aspect_code]
    await answer_html(
        message,
        f"<b>{label}</b> –¥–ª—è —Å—Ç—Ä–∞–Ω—ã <b>{country_name}</b>:\n\n{stars_to_bold(current_value or '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)')}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è, –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(EditAspect.waiting_new_value)
    await state.update_data(user_id=user_id, aspect_code=aspect_code, country_name=country_name)

@router.message(EditAspect.waiting_new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data:
        await answer_html(message, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Å—Ç—Ä–∞–Ω–∞ –∏ –∞—Å–ø–µ–∫—Ç.")
        await state.clear()
        return

    user_id = data["user_id"]
    aspect_code = data["aspect_code"]
    country_name = data["country_name"]
    new_value = message.text.strip()

    await set_user_aspect(user_id, aspect_code, new_value)
    label = dict((a[0], a[1]) for a in ASPECTS)[aspect_code]

    await answer_html(
        message,
        f"<b>{label}</b> –¥–ª—è —Å—Ç—Ä–∞–Ω—ã <b>{country_name}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!"
    )
    await state.clear()

def register(dp):
    dp.include_router(router)
