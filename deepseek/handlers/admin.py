from aiogram import types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import ADMIN_CHAT_ID
from database import *
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils import answer_html, send_html, stars_to_bold
from .fsm import EditAspect
from game import ASPECTS
from event_generator import generate_event_for_country
from .fsm import ConfirmEvent, AdminSendMessage

router = Router()

from database import get_country_by_synonym_or_name  # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å!

@router.message(Command("info"))
async def info(message: types.Message):
    if message.chat.id != ADMIN_CHAT_ID:
        await answer_html(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    params = message.text.split(maxsplit=1)[1:]
    args = params[0].split() if params else []

    countries = await get_all_active_countries()
    if not countries:
        await answer_html(message, "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        return

    countries_dict = {}
    for country_tuple in countries:
        user_id, country_name, country_desc, *aspect_values = country_tuple
        countries_dict[country_name.strip().lower()] = {
            "user_id": user_id,
            "country_name": country_name,
            "country_desc": country_desc,
            "aspects": aspect_values
        }

    aspect_labels = {a[0]: a[1] for a in ASPECTS}
    aspect_codes = list(aspect_labels.keys())
    # --- –î–æ–±–∞–≤–ª—è–µ–º "–æ–ø–∏—Å–∞–Ω–∏–µ" –∫–∞–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å–ø–µ–∫—Ç ---
    aspect_labels["–æ–ø–∏—Å–∞–Ω–∏–µ"] = "–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã"
    aspect_codes.append("–æ–ø–∏—Å–∞–Ω–∏–µ")

    # HELP
    if args and args[0].lower() in ("help", "—Å–ø—Ä–∞–≤–∫–∞", "?"):
        help_text = (
                "<b>/info</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω –∏ –∞—Å–ø–µ–∫—Ç–æ–≤\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "/info ‚Äî –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã –∏ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã\n"
                "/info <–∞—Å–ø–µ–∫—Ç> ‚Äî —ç—Ç–æ—Ç –∞—Å–ø–µ–∫—Ç/–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º\n"
                "/info <–∞—Å–ø–µ–∫—Ç> <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã> ‚Äî –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Å–ø–µ–∫—Ç –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã\n\n"
                "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã –∞—Å–ø–µ–∫—Ç–æ–≤:</b>\n" +
                "\n".join(f"<b>{code}</b>: {aspect_labels[code]}" for code in aspect_codes)
        )
        await send_html(message.bot, ADMIN_CHAT_ID, help_text)
        return

    # /info
    if not args:
        for country_tuple in countries:
            user_id, country_name, country_desc, *aspect_values = country_tuple
            await send_html(
                message.bot,
                ADMIN_CHAT_ID,
                f"üó∫ <b>–°—Ç—Ä–∞–Ω–∞:</b> {country_name} (ID: {user_id})"
            )
            await send_html(
                message.bot,
                ADMIN_CHAT_ID,
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{country_desc or '(–ù–µ—Ç)'}"
            )
            for (code, label, _), value in zip(ASPECTS, aspect_values):
                if value and value.strip():
                    await send_html(
                        message.bot,
                        ADMIN_CHAT_ID,
                        f"<b>{label}</b>:\n{stars_to_bold(value)}"
                    )
        return

    # /info <–∞—Å–ø–µ–∫—Ç>
    if len(args) == 1:
        aspect = args[0].lower()
        if aspect not in aspect_labels:
            await answer_html(message, "–ê—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if aspect == "–æ–ø–∏—Å–∞–Ω–∏–µ":
            for country_tuple in countries:
                country_name = country_tuple[1]
                user_id = country_tuple[0]
                desc = await get_user_country_desc(user_id)
                if desc and desc.strip():
                    await send_html(
                        message.bot, ADMIN_CHAT_ID,
                        f"<b>{country_name}</b> (ID: {user_id}):\n<b>–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:</b>\n{desc}"
                    )
            return
        idx = aspect_codes.index(aspect)
        for country_tuple in countries:
            country_name = country_tuple[1]
            user_id = country_tuple[0]
            aspect_value = country_tuple[3 + idx]
            if aspect_value and aspect_value.strip():
                await send_html(
                    message.bot, ADMIN_CHAT_ID,
                    f"<b>{country_name}</b> (ID: {user_id}):\n<b>{aspect_labels[aspect]}</b>:\n{stars_to_bold(aspect_value)}"
                )
        return

    # /info <–∞—Å–ø–µ–∫—Ç> <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç—Ä–∞–Ω—ã>
    if len(args) >= 2:
        aspect = args[0].lower()
        country_input = " ".join(args[1:]).strip()
        main_country_name = await get_country_by_synonym_or_name(country_input)

        if not main_country_name or main_country_name.strip().lower() not in countries_dict:
            await answer_html(message, "–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        country_info = countries_dict[main_country_name.strip().lower()]

        if aspect not in aspect_labels:
            await answer_html(message, "–ê—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if aspect == "–æ–ø–∏—Å–∞–Ω–∏–µ":
            desc = await get_user_country_desc(country_info['user_id'])
            if desc and desc.strip():
                await send_html(
                    message.bot,
                    ADMIN_CHAT_ID,
                    f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã</b> –¥–ª—è <b>{country_info['country_name']}</b>:\n{desc}"
                )
            else:
                await send_html(
                    message.bot,
                    ADMIN_CHAT_ID,
                    f"–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è <b>{country_info['country_name']}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                )
            return
        idx = aspect_codes.index(aspect)
        value = country_info["aspects"][idx]
        label = aspect_labels[aspect]
        if value and value.strip():
            await send_html(
                message.bot,
                ADMIN_CHAT_ID,
                f"<b>{label}</b> –¥–ª—è —Å—Ç—Ä–∞–Ω—ã <b>{country_info['country_name']}</b>:\n{stars_to_bold(value)}"
            )
        else:
            await send_html(
                message.bot,
                ADMIN_CHAT_ID,
                f"–ê—Å–ø–µ–∫—Ç <b>{label}</b> –¥–ª—è —Å—Ç—Ä–∞–Ω—ã <b>{country_info['country_name']}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
        return

    await answer_html(
        message,
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –§–æ—Ä–º–∞—Ç—ã:\n"
        "/info [–∞—Å–ø–µ–∫—Ç]\n"
        "/info [–∞—Å–ø–µ–∫—Ç] [–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã]\n"
        "/info\n\n"
        "–î–ª—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏—Ç–µ /info help"
    )

@router.message(Command("edit"))
async def admin_edit(message: types.Message, state: FSMContext):
    if message.chat.id != ADMIN_CHAT_ID:
        await answer_html(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text.split(maxsplit=1)[1:]
    if not args:
        await answer_html(message, "–§–æ—Ä–º–∞—Ç: /edit <–∞—Å–ø–µ–∫—Ç> <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã>")
        return
    parts = args[0].split()
    if len(parts) < 2:
        await answer_html(message, "–§–æ—Ä–º–∞—Ç: /edit <–∞—Å–ø–µ–∫—Ç> <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã>")
        return

    aspect_code = parts[0].strip()
    country_name = " ".join(parts[1:]).strip()
    user_id = await get_user_id_by_country(country_name)
    if not user_id:
        await answer_html(message, f'–°—Ç—Ä–∞–Ω–∞ "{country_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return

    # --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –∫–∞–∫ "–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ" –∞—Å–ø–µ–∫—Ç–∞ ---
    if aspect_code == "–æ–ø–∏—Å–∞–Ω–∏–µ":
        current_value = await get_user_country_desc(user_id)
        await answer_html(
            message,
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã</b> –¥–ª—è <b>{country_name}</b>:\n\n{current_value or '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)'}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è, –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        await state.set_state(EditAspect.waiting_new_value)
        await state.update_data(user_id=user_id, aspect_code=aspect_code, country_name=country_name)
        return

    if aspect_code not in [a[0] for a in ASPECTS]:
        await answer_html(message, f'–ê—Å–ø–µ–∫—Ç "{aspect_code}" –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    current_value = await get_user_aspect(user_id, aspect_code)
    label = dict((a[0], a[1]) for a in ASPECTS)[aspect_code]
    await answer_html(
        message,
        f"<b>{label}</b> –¥–ª—è —Å—Ç—Ä–∞–Ω—ã <b>{country_name}</b>:\n\n{stars_to_bold(current_value or '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)')}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è, –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(EditAspect.waiting_new_value)
    await state.update_data(user_id=user_id, aspect_code=aspect_code, country_name=country_name)

@router.message(EditAspect.waiting_new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data:
        await answer_html(message, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Å—Ç—Ä–∞–Ω–∞ –∏ –∞—Å–ø–µ–∫—Ç.")
        await state.clear()
        return

    user_id = data["user_id"]
    aspect_code = data["aspect_code"]
    country_name = data["country_name"]
    new_value = message.text.strip()

    if aspect_code == "–æ–ø–∏—Å–∞–Ω–∏–µ":
        await set_user_country_desc(user_id, new_value)
        await answer_html(
            message,
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã</b> –¥–ª—è <b>{country_name}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
        )
        await state.clear()
        return

    await set_user_aspect(user_id, aspect_code, new_value)
    label = dict((a[0], a[1]) for a in ASPECTS).get(aspect_code, aspect_code)
    await answer_html(
        message,
        f"<b>{label}</b> –¥–ª—è —Å—Ç—Ä–∞–Ω—ã <b>{country_name}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!"
    )
    await state.clear()

@router.message(Command("del_country"))
async def admin_delete_country(message: types.Message):
    if message.chat.id != ADMIN_CHAT_ID:
        await answer_html(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text.split(maxsplit=1)[1:]
    if not args:
        await answer_html(message, "–§–æ—Ä–º–∞—Ç: /del_country <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç—Ä–∞–Ω—ã>")
        return

    country_name = args[0].strip()
    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤ ‚Äî –∂–¥—ë–º –∏—Ö —Å–ª–∏—Ç–Ω–æ:
    if len(args) > 1:
        country_name = " ".join(args).strip()

    user_id = await get_user_id_by_country(country_name)
    if not user_id:
        await answer_html(message, f'–°—Ç—Ä–∞–Ω–∞ "{country_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return

    await clear_history(user_id)
    await clear_user_aspects(user_id)
    await set_user_country(user_id, None)
    await set_user_country_desc(user_id, None)
    await set_aspect_index(user_id, None)

    await answer_html(message, f'–°—Ç—Ä–∞–Ω–∞ "{country_name}" –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.')

@router.message(Command("help"))
async def admin_help(message: types.Message):
    if message.chat.id != ADMIN_CHAT_ID:
        await answer_html(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    await answer_html(
        message,
        "<b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "<b>/info [–∞—Å–ø–µ–∫—Ç] [—Å—Ç—Ä–∞–Ω–∞]</b> ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å–ø–µ–∫—Ç—ã (–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ) —Å—Ç—Ä–∞–Ω\n"
        "<b>/edit [–∞—Å–ø–µ–∫—Ç] [—Å—Ç—Ä–∞–Ω–∞]</b> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∞—Å–ø–µ–∫—Ç –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã\n"
        "<b>/del_country [—Å—Ç—Ä–∞–Ω–∞]</b> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É\n"
        "<b>/event [—Å—Ç—Ä–∞–Ω–∞|–≤—Å–µ]</b> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–≤–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –≤—Å–µ—Ö\n"
        "<b>/send [—Å—Ç—Ä–∞–Ω–∞|–≤—Å–µ]</b> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ –≤—Å–µ–º\n"
        "<b>/help</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã:</b>\n"
        + ", ".join(f"<b>{a[0]}</b>" for a in ASPECTS) +
        ", <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b>"
    )

@router.message(Command("event"))
async def admin_generate_event(message: types.Message, state: FSMContext):
    if message.chat.id != ADMIN_CHAT_ID:
        await answer_html(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text.split(maxsplit=1)[1:]
    if not args:
        await answer_html(message, "–§–æ—Ä–º–∞—Ç: /event <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç—Ä–∞–Ω—ã> –∏–ª–∏ /event –≤—Å–µ")
        return

    country_name = args[0].strip()
    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤ ‚Äî –∂–¥—ë–º –∏—Ö —Å–ª–∏—Ç–Ω–æ:
    if len(args) > 1:
        country_name = " ".join(args).strip()

    await answer_html(message, f"‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≤–µ–Ω—Ç–∞ –¥–ª—è {country_name}...")

    # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö
    if country_name.lower() == "–≤—Å–µ":
        event_text = await generate_event_for_country("–≤—Å–µ")
    else:
        event_text = await generate_event_for_country(country_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≤–µ–Ω—Ç –∏ —Å—Ç—Ä–∞–Ω—É –≤ FSM –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(ConfirmEvent.waiting_approve)
    await state.update_data(event_text=event_text, country_name=country_name)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–î–∞")], [KeyboardButton(text="–ù–µ—Ç")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await answer_html(
        message,
        f"<b>–°–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã {country_name}:</b>\n\n{event_text}\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ? (–î–∞/–ù–µ—Ç)",
        reply_markup=kb
    )

@router.message(ConfirmEvent.waiting_approve)
async def confirm_event_send(message: types.Message, state: FSMContext):
    text = message.text.strip().lower()
    data = await state.get_data()
    event_text = data.get("event_text")
    country_name = data.get("country_name")
    await state.clear()

    if text not in ("–¥–∞", "yes"):
        await answer_html(message, "–°–æ–±—ã—Ç–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=None)
        return

    # –ï—Å–ª–∏ "–≤—Å–µ" ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º
    if country_name.lower() == "–≤—Å–µ":
        countries = await get_all_active_countries()
        for row in countries:
            user_id = row[0]
            try:
                await message.bot.send_message(user_id, f"‚ö°Ô∏è <b>–í –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:</b>\n\n{event_text}", parse_mode="HTML")
                await add_event_to_history_all(event_text)
            except Exception as e:
                continue
        await answer_html(message, "–°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º!", reply_markup=None)
        return

    # –î–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    user_id = await get_user_id_by_country(country_name)
    if not user_id:
        await answer_html(message, f'–°—Ç—Ä–∞–Ω–∞ "{country_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', reply_markup=None)
        return
    try:
        await message.bot.send_message(user_id, f"‚ö°Ô∏è <b>–í –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:</b>\n\n{event_text}", parse_mode="HTML")
        await add_event_to_history(user_id, event_text)
        await answer_html(message, "–°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É.", reply_markup=None)
    except Exception as e:
        await answer_html(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä–æ–∫—É.", reply_markup=None)

@router.message(Command("send"))
async def admin_prepare_send_message(message: types.Message, state: FSMContext):
    if message.chat.id != ADMIN_CHAT_ID:
        await answer_html(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text.split(maxsplit=1)[1:]
    if not args:
        await answer_html(message, "–§–æ—Ä–º–∞—Ç: /send <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç—Ä–∞–Ω—ã> –∏–ª–∏ /send –≤—Å–µ")
        return

    target = args[0].strip()
    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤ ‚Äî –∂–¥—ë–º –∏—Ö —Å–ª–∏—Ç–Ω–æ:
    if len(args) > 1:
        target = " ".join(args).strip()
    await state.set_state(AdminSendMessage.waiting_message)
    await state.update_data(target=target)

    await answer_html(message, f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {'–≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º' if target.lower() == '–≤—Å–µ' else f'—Å—Ç—Ä–∞–Ω–µ {target}'}:")

@router.message(AdminSendMessage.waiting_message)
async def admin_do_send_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    target = data.get("target")
    text = message.text.strip()
    await state.clear()

    if target.lower() == "–≤—Å–µ":
        countries = await get_all_active_countries()
        success = 0
        for row in countries:
            user_id = row[0]
            try:
                await message.bot.send_message(user_id, text, parse_mode="HTML")
                success += 1
            except Exception:
                continue
        await answer_html(message, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º {success} —Å—Ç—Ä–∞–Ω–∞–º!")
        return

    user_id = await get_user_id_by_country(target)
    if not user_id:
        await answer_html(message, f'–°—Ç—Ä–∞–Ω–∞ "{target}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return
    try:
        await message.bot.send_message(user_id, text, parse_mode="HTML")
        await answer_html(message, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–∞–Ω–µ.")
    except Exception:
        await answer_html(message, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É.")

@router.message(Command("countries"))
async def admin_list_country_synonyms(message: types.Message):
    if message.chat.id != ADMIN_CHAT_ID:
        await answer_html(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    country_synonyms = await get_all_countries_and_synonyms()
    if not country_synonyms:
        await answer_html(message, "–°—Ç—Ä–∞–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
        return

    lines = []
    for country, synonyms in country_synonyms.items():
        if synonyms:
            lines.append(f"<b>{country}</b>: {', '.join(synonyms)}")
        else:
            lines.append(f"<b>{country}</b>: -")

    text = "<b>–°—Ç—Ä–∞–Ω—ã –∏ –∏—Ö —Å–∏–Ω–æ–Ω–∏–º—ã:</b>\n" + "\n".join(lines)
    await answer_html(message, text)

def register(dp):
    dp.include_router(router)
