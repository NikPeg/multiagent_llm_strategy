import asyncio
import logging
from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from transformers import AutoModelForCausalLM, AutoTokenizer
from database import init_db, get_history, update_history, clear_history
import torch
from concurrent.futures import ThreadPoolExecutor
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
HISTORY_LIMIT = int(os.getenv("HISTORY_LIMIT", 10))
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

if not ADMIN_CHAT_ID:
    logger.warning("ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env! –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
model_name = "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    device_map="auto",
    torch_dtype=torch.float16,
    use_flash_attention_2=False
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
device_info = f"–ú–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {model.device}"
logger.info(device_info)
cuda_available = torch.cuda.is_available()
logger.info(f"CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {cuda_available}")

if cuda_available:
    cuda_device_count = torch.cuda.device_count()
    cuda_device_name = torch.cuda.get_device_name(0) if cuda_device_count > 0 else "–ù–µ—Ç"
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {cuda_device_count}")
    logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ GPU: {cuda_device_name}")
    logger.info(f"–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –ø–∞–º—è—Ç–∏: {torch.cuda.memory_allocated() / 1024**2:.2f} –ú–ë")
    logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è GPU –ø–∞–º—è—Ç—å: {torch.cuda.get_device_properties(0).total_memory / 1024**2:.2f} –ú–ë")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

executor = ThreadPoolExecutor(max_workers=1)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
class CountryRegistration(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
SYSTEM_PROMPT = """
–¢—ã - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏ –º—É–¥—Ä—ã–π —Å—É–¥—å—è –≤ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –†–ü–ì-–∏–≥—Ä–µ, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–≥—Ä–∞—é—Ç –∑–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.
–£—á–∏—Ç—ã–≤–∞–π —ç–∫–æ–Ω–æ–º–∏–∫—É, –¥–∏–ø–ª–æ–º–∞—Ç–∏—é, –≤–æ–µ–Ω–Ω—É—é –º–æ—â—å, —Ä–µ—Å—É—Ä—Å—ã –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö.
–ë—É–¥—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º, –Ω–µ –æ—Ç–¥–∞–≤–∞–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ —Å—Ç—Ä–∞–Ω.
–û–ø–∏—Å—ã–≤–∞–π –º–∏—Ä –≤ –¥–µ—Ç–∞–ª—è—Ö, –ø–æ–º–æ–≥–∞–π –∏–≥—Ä–æ–∫–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∏—Ö –∏—Å—Ç–æ—Ä–∏–∏.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - –∫–∞–∂–¥–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π.
"""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
async def forward_to_admins(user_message, bot_reply, user_info):
    if not ADMIN_CHAT_ID:
        return

    try:
        admin_notification = (
            f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ\n\n"
            f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info}\n\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_message}\n\n"
            f"ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:\n{bot_reply}"
        )

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
        if len(admin_notification) > 4000:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ\n\nüë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_message}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞:\n{bot_reply}"
            )
        else:
            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_notification)

        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {str(e)}", exc_info=True)

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    user_info = f"{message.from_user.full_name} (@{message.from_user.username}, ID: {message.from_user.id})"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    await clear_history(message.from_user.id)

    reply_text = (
        "üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –†–ü–ì! üåç\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–æ–π, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–∏—Ä–æ–º –∏ –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞?"
    )

    await message.answer(reply_text)

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if ADMIN_CHAT_ID:
        await forward_to_admins(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞",
            reply_text,
            user_info
        )

    await state.set_state(CountryRegistration.waiting_for_name)

@dp.message(CountryRegistration.waiting_for_name)
async def process_country_name(message: types.Message, state: FSMContext):
    user_info = f"{message.from_user.full_name} (@{message.from_user.username}, ID: {message.from_user.id})"

    await state.update_data(country_name=message.text)

    reply_text = (
        f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è {message.text}.\n\n"
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É: —Ñ–æ—Ä–º–∞ –ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ä–µ—Å—É—Ä—Å—ã, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –∫—É–ª—å—Ç—É—Ä–∞, "
        "–≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏, –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–æ—Å–µ–¥—è–º–∏ –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏."
    )

    await message.answer(reply_text)

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if ADMIN_CHAT_ID:
        await forward_to_admins(
            f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: {message.text}",
            reply_text,
            user_info
        )

    await state.set_state(CountryRegistration.waiting_for_description)

@dp.message(CountryRegistration.waiting_for_description)
async def process_country_description(message: types.Message, state: FSMContext):
    user_info = f"{message.from_user.full_name} (@{message.from_user.username}, ID: {message.from_user.id})"

    await state.update_data(description=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    country_name = data.get("country_name")
    description = data.get("description")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
    country_description = (
        f"–°—Ç—Ä–∞–Ω–∞ –∏–≥—Ä–æ–∫–∞: {country_name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: {description}"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    initial_message = (
        "–ò–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É –≤ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –†–ü–ì.\n"
        f"{country_description}"
    )

    await update_history(message.from_user.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω—ã", initial_message, HISTORY_LIMIT)

    reply_text = (
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ {country_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üéâ\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–∏—Ä–æ–º. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, "
        "–ø–ª–∞–Ω—ã –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new."
    )

    await message.answer(reply_text)

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ
    if ADMIN_CHAT_ID:
        await forward_to_admins(
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: {message.text}\n\n"
            f"–°–¢–†–ê–ù–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ê:\n{country_description}",
            reply_text,
            user_info
        )

    await state.clear()

@dp.message(Command("new"))
async def new_chat(message: types.Message, state: FSMContext):
    user_info = f"{message.from_user.full_name} (@{message.from_user.username}, ID: {message.from_user.id})"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∏–≥—Ä—É")

    await clear_history(message.from_user.id)
    reply_text = "‚öîÔ∏è –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. ‚öîÔ∏è\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"

    await message.answer(reply_text)

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if ADMIN_CHAT_ID:
        await forward_to_admins(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–±—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∞–ª –Ω–æ–≤—É—é –∏–≥—Ä—É",
            reply_text,
            user_info
        )

@dp.message(F.text)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_text = message.text
    user_info = f"{message.from_user.full_name} (@{message.from_user.username}, ID: {user_id})"

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}: {user_text[:50]}...")
    try:
        await bot.send_chat_action(chat_id=chat_id, action="typing")
        loop = asyncio.get_event_loop()
        typing_task = asyncio.create_task(keep_typing(chat_id))
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        assistant_reply = await loop.run_in_executor(executor, sync_generate_response, user_id, user_text)
        logger.info(f"–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        typing_task.cancel()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not assistant_reply or assistant_reply.strip() == "":
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            assistant_reply = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ."

        await message.answer(assistant_reply)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        if ADMIN_CHAT_ID:
            await forward_to_admins(user_text, assistant_reply, user_info)

    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞: {str(e)}"
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        try:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        except Exception as reply_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(reply_error)}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        if ADMIN_CHAT_ID:
            try:
                await bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_info}:\n{str(e)}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}"
                )
            except Exception as admin_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {str(admin_error)}")

async def keep_typing(chat_id):
    try:
        typing_count = 0
        while True:
            await bot.send_chat_action(chat_id=chat_id, action="typing")
            typing_count += 1
            await asyncio.sleep(3)
    except asyncio.CancelledError:
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ keep_typing: {str(e)}", exc_info=True)

def sync_generate_response(user_id, message_text):
    import asyncio
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        history = loop.run_until_complete(get_history(user_id))

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        context = SYSTEM_PROMPT + "\n\n" + '\n'.join(history + [f"–ò–≥—Ä–æ–∫: {message_text}"]) + "\n–°—É–¥—å—è –∏–≥—Ä—ã:"

        inputs = tokenizer(context, return_tensors="pt").to(model.device)

        try:
            outputs = model.generate(
                **inputs,
                max_new_tokens=512,
                do_sample=True,
                temperature=0.7,
                top_p=0.95,
                eos_token_id=tokenizer.eos_token_id,
                pad_token_id=tokenizer.eos_token_id
            )

            response = tokenizer.decode(outputs[0], skip_special_tokens=True)
            assistant_reply = response[len(context):].strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not assistant_reply or assistant_reply.strip() == "":
                assistant_reply = "–ö–∞–∫ —Å—É–¥—å—è –∏–≥—Ä—ã, —è –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –º–∏—Ä–µ."

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            if '\n' in assistant_reply:
                clean_lines = []
                for line in assistant_reply.split('\n'):
                    if not line.strip().startswith('–ò–≥—Ä–æ–∫:') and not line.strip().startswith('User:'):
                        clean_lines.append(line)
                assistant_reply = '\n'.join(clean_lines)

            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            if not assistant_reply or assistant_reply.strip() == "":
                assistant_reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–∞—à—É –∏–≥—Ä—É, –æ–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã."

        except Exception as gen_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(gen_error)}", exc_info=True)
            assistant_reply = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

        loop.run_until_complete(update_history(user_id, message_text, assistant_reply, HISTORY_LIMIT))
        loop.close()
        return assistant_reply
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_response: {str(e)}", exc_info=True)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n–í–µ—Ä—Å–∏—è: –ì–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –†–ü–ì\n–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {str(e)}")

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        if ADMIN_CHAT_ID:
            try:
                asyncio.run(bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=f"üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                ))
            except:
                pass
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        if ADMIN_CHAT_ID:
            try:
                asyncio.run(bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=f"‚õî –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –ë–æ—Ç –∞–≤–∞—Ä–∏–π–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n{str(e)}\n–í—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                ))
            except:
                pass
