import asyncio
import logging
from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from transformers import AutoModelForCausalLM, AutoTokenizer
from database import init_db, get_history, update_history, clear_history
import torch
from concurrent.futures import ThreadPoolExecutor

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
HISTORY_LIMIT = int(os.getenv("HISTORY_LIMIT", 4))

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

model_name = "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    device_map="auto",
    torch_dtype=torch.float16,
    use_flash_attention_2=False
)

device_info = f"–ú–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {model.device}"
logger.info(device_info)
cuda_available = torch.cuda.is_available()
logger.info(f"CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {cuda_available}")

if cuda_available:
    cuda_device_count = torch.cuda.device_count()
    cuda_device_name = torch.cuda.get_device_name(0) if cuda_device_count > 0 else "–ù–µ—Ç"
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {cuda_device_count}")
    logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ GPU: {cuda_device_name}")
    logger.info(f"–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –ø–∞–º—è—Ç–∏: {torch.cuda.memory_allocated() / 1024**2:.2f} –ú–ë")
    logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è GPU –ø–∞–º—è—Ç—å: {torch.cuda.get_device_properties(0).total_memory / 1024**2:.2f} –ú–ë")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

executor = ThreadPoolExecutor(max_workers=1)

# user_state —Ö—Ä–∞–Ω–∏—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —ç—Ç–∞–ø—ã –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
user_state = {}
user_country = {}    # user_id: country_name
user_country_desc = {}  # user_id: country_description

# –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–æ–ª–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–ø–µ—Ä–µ–¥–∞–¥–∏–º –≤ –º–æ–¥–µ–ª—å –ø–µ—Ä–≤—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º!)
RPG_PROMPT = (
    "–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π —Ä–æ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–≥—Ä—ã –≤ —Å—Ç–∏–ª–µ –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∏ –¥—Ä–µ–≤–Ω–µ–≥–æ –º–∏—Ä–∞. "
    "–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–æ–π, —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –µ—ë —ç–∫–æ–Ω–æ–º–∏–∫—É, –¥–∏–ø–ª–æ–º–∞—Ç–∏—é "
    "–∏ –∞—Ä–º–∏—é, —Å—Ç—Ä–æ–∏—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–æ—Å–µ–¥—è–º–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è. "
    "–¶–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ—Ü–≤–µ—Ç–∞—é—â–µ–π –∏ –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, "
    "–ª—é–±–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è! –¢—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, "
    "–æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –æ—Ç –ª–∏—Ü–∞ –º–∞—Å—Ç–µ—Ä–∞ –∏–≥—Ä—ã, —á–µ—Ç–∫–æ —Å–ª–µ–¥—É—è –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫–æ–º —Å–µ—Ç—Ç–∏–Ω–≥—É, "
    "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç—Å—Ç—É–ø–∞–µ—à—å –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏. –í—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –∏–≥—Ä–æ–∫–∞."
)

@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    user_state[user_id] = 'waiting_for_country_name'
    await clear_history(user_id)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–ª–µ–≤—É—é –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É —ç–ø–æ—Ö–∏ –¥—Ä–µ–≤–Ω–µ–≥–æ –º–∏—Ä–∞!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω—ã:"
    )

@dp.message(Command("new"))
async def new_chat(message: types.Message):
    await clear_history(message.from_user.id)
    await message.answer("‚öîÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω!‚öîÔ∏è")

@dp.message(F.text)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_text = message.text
    user_name = message.from_user.username

    # –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –∏–º–µ–Ω–∏ —Å—Ç—Ä–∞–Ω—ã/–æ–ø–∏—Å–∞–Ω–∏—è
    if user_id in user_state:
        state = user_state[user_id]
        if state == 'waiting_for_country_name':
            user_country[user_id] = user_text.strip()
            user_state[user_id] = 'waiting_for_country_desc'
            await message.answer(
                f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: <b>{user_text.strip()}</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É (–≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–∞—Ä–æ–¥, –∫—É–ª—å—Ç—É—Ä–∞, —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è):",
                parse_mode="HTML"
            )
            return
        elif state == 'waiting_for_country_desc':
            user_country_desc[user_id] = user_text.strip()
            del user_state[user_id]
            await message.answer(
                f"–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞!\n"
                f"–î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å—Ç—Ä–∞–Ω—ã <b>{user_country[user_id]}</b>.\n"
                f"–¢—ã –º–æ–∂–µ—à—å –æ—Ç–¥–∞–≤–∞—Ç—å –ø—Ä–∏–∫–∞–∑—ã, –æ–±—ä—è–≤–ª—è—Ç—å –≤–æ–π–Ω—ã, —Å—Ç—Ä–æ–∏—Ç—å –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏.\n"
                f"–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–π /new —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç."
                "\n\n–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º?"
                , parse_mode="HTML"
            )
            # –ó–∞–ø–∏—à–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Ä–æ–ª–µ–≤–æ–π –∏ –≤–≤–æ–¥–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            intro_prompt = (
                f"{RPG_PROMPT}\n\n"
                f"–ò–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–æ–π \"{user_country[user_id]}\".\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –æ—Ç –∏–≥—Ä–æ–∫–∞: {user_country_desc[user_id]}\n"
            )
            await update_history(user_id, "–°–¢–ê–†–¢", intro_prompt, HISTORY_LIMIT)
            return

    # –ï—Å–ª–∏ –Ω–µ –∏–¥—ë—Ç —ç—Ç–∞–ø –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ‚Äî –æ–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –¥–∏–∞–ª–æ–≥
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {user_name}: {user_text[:50]}...")
    try:
        await bot.send_chat_action(chat_id=chat_id, action="typing")
        loop = asyncio.get_event_loop()
        typing_task = asyncio.create_task(keep_typing(chat_id))
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        # –ü–µ—Ä–µ–¥–∞—ë–º –∏—Ö —Å—Ç—Ä–∞–Ω—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        country_name = user_country.get(user_id, None)
        country_desc = user_country_desc.get(user_id, None)
        assistant_reply, context = await loop.run_in_executor(
            executor, sync_generate_response, user_id, user_text, country_name, country_desc
        )
        logger.info(f"–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        typing_task.cancel()
        await message.answer(assistant_reply)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await bot.send_message(
            ADMIN_CHAT_ID,
            f"üì® –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {user_name}:\n\n"
            f"<b>–ü—Ä–æ–º–ø—Ç, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ –º–æ–¥–µ–ª—å:</b>\n"
            f"<code>{context}</code>\n\n"
            f"<b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:</b>\n"
            f"<code>{assistant_reply}</code>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

async def keep_typing(chat_id):
    try:
        typing_count = 0
        while True:
            await bot.send_chat_action(chat_id=chat_id, action="typing")
            typing_count += 1
            await asyncio.sleep(3)
    except asyncio.CancelledError:
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ keep_typing: {str(e)}", exc_info=True)

def sync_generate_response(user_id, message_text, country_name=None, country_desc=None):
    import asyncio
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        history = loop.run_until_complete(get_history(user_id))

        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å —É—á—ë—Ç–æ–º —Å—Ç—Ä–∞–Ω—ã):
        context_prompts = [RPG_PROMPT]
        if country_name and country_desc:
            context_prompts.append(
                f"–ò–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–æ–π \"{country_name}\". –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: {country_desc}"
            )
        context = '\n'.join(context_prompts + history + [f"User: {message_text}"]) + "\nAssistant:"

        inputs = tokenizer(context, return_tensors="pt").to(model.device)
        outputs = model.generate(
            **inputs,
            max_new_tokens=512,
            do_sample=True,
            temperature=0.7,
            top_p=0.95,
            eos_token_id=tokenizer.eos_token_id,
            pad_token_id=tokenizer.eos_token_id
        )
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ Assistant:
        ai_response = response[len(context):].strip().split('\n')[0]
        loop.run_until_complete(update_history(user_id, message_text, ai_response, HISTORY_LIMIT))
        loop.close()
        return ai_response, context
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_response: {str(e)}", exc_info=True)
        raise

async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
