from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from concurrent.futures import ThreadPoolExecutor
from model_handler import ModelHandler
from database import *
from utils import *
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
HISTORY_LIMIT = int(os.getenv("HISTORY_LIMIT", 4))
MAX_NEW_TOKENS = int(os.getenv("MAX_NEW_TOKENS", 512))
SHORT_NEW_TOKENS = int(os.getenv("SHORT_NEW_TOKENS", 250))

GAME_PROMPT = (
    "–¢—ã ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≤–µ–¥—É—â–∏–π —Ä–æ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–≥—Ä—ã –≤ —Å—Ç–∏–ª–µ –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∏ –¥—Ä–µ–≤–Ω–µ–≥–æ –º–∏—Ä–∞. "
    "–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–æ–π, —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –µ—ë —ç–∫–æ–Ω–æ–º–∏–∫—É, –¥–∏–ø–ª–æ–º–∞—Ç–∏—é "
    "–∏ –∞—Ä–º–∏—é, —Å—Ç—Ä–æ–∏—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–æ—Å–µ–¥—è–º–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è. "
)
# –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–æ–ª–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
RPG_PROMPT = (
    f"{GAME_PROMPT}"
    "–¢—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, "
    "–æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –æ—Ç –ª–∏—Ü–∞ –º–∞—Å—Ç–µ—Ä–∞ –∏–≥—Ä—ã, —á–µ—Ç–∫–æ —Å–ª–µ–¥—É—è —Å–µ—Ç—Ç–∏–Ω–≥—É –¥—Ä–µ–≤–Ω–µ–≥–æ –º–∏—Ä–∞, "
    "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç—Å—Ç—É–ø–∞–µ—à—å –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏."
)


if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

model_handler = ModelHandler(MAX_NEW_TOKENS, SHORT_NEW_TOKENS)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
executor = ThreadPoolExecutor(max_workers=1)

# –°–ø–∏—Å–æ–∫ –∞—Å–ø–µ–∫—Ç–æ–≤ —Å—Ç—Ä–∞–Ω—ã: (–∫–æ–¥–æ–≤–æ–µ_–ø–æ–ª–µ, —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–æ–ø—Ä–æ—Å)
ASPECTS = [
    ("—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–≠–∫–æ–Ω–æ–º–∏–∫–∞", "–≠–∫–æ–Ω–æ–º–∏–∫–∞ —Å—Ç—Ä–∞–Ω—ã, –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, –±–æ–≥–∞—Ç—Å—Ç–≤–æ:"),
    ("–≤–æ–µ–Ω–Ω–æ–µ_–¥–µ–ª–æ", "–í–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ", "–í–æ–µ–Ω–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –∞—Ä–º–∏–∏ –∏ –æ–±–æ—Ä–æ–Ω–∞ —Å—Ç—Ä–∞–Ω—ã:"),
    ("–≤–Ω–µ—à_–ø–æ–ª–∏—Ç–∏–∫–∞", "–í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞", "–í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–æ—Å–µ–¥—è–º–∏:"),
    ("—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è", "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è", "–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è, –≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω—ã:"),
    ("—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å", "–£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ —Å—Ç—Ä–∞–Ω–µ:"),
    ("—Ä–µ–ª–∏–≥–∏—è_–∫—É–ª—å—Ç—É—Ä–∞", "–†–µ–ª–∏–≥–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞", "–†–µ–ª–∏–≥–∏—è, –∫—É–ª—å—Ç—É—Ä–∞, –∏—Å–∫—É—Å—Å—Ç–≤–æ, —Ç—Ä–∞–¥–∏—Ü–∏–∏ —Å—Ç—Ä–∞–Ω—ã:"),
    ("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–æ", "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç—Ä–æ–π, –∑–∞–∫–æ–Ω—ã —Å—Ç—Ä–∞–Ω—ã:"),
    ("—Å—Ç—Ä–æ–π–∫–∞", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –≤–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:"),
    ("–æ–±—â–µ—Å—Ç–≤–æ", "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–ª–∞—Å—Å—ã –æ–±—â–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω—ã:"),
]
ASPECT_KEYS = [a[0] for a in ASPECTS]

@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id

    if await user_exists(user_id):
        help_text = (
            "üëë <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!</b>\n\n"
            "–≠—Ç–æ —Ä–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞ –≤ –∂–∞–Ω—Ä–µ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥—Ä–µ–≤–Ω–µ–≥–æ –º–∏—Ä–∞.\n"
            "–í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–æ–π: —Ä–∞–∑–≤–∏–≤–∞–µ—Ç–µ —ç–∫–æ–Ω–æ–º–∏–∫—É, –∞—Ä–º–∏—é, –¥–∏–ø–ª–æ–º–∞—Ç–∏—é.\n\n"
            "üìú <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/new ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –¥–∏–∞–ª–æ–≥, —Å–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
            "/reset_country ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é\n"
            "–î–ª—è –∏–≥—Ä—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–∫–∞–∑–∞–º–∏, –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–ª–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏, –∫–∞–∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω—ã!\n"
        )
        await answer_html(message, help_text)
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω—ã
    await clear_history(user_id)
    await clear_user_aspects(user_id)
    await set_user_country(user_id, None)
    await set_user_country_desc(user_id, None)
    await set_aspect_index(user_id, None)
    await answer_html(
        message,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–ª–µ–≤—É—é –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É —ç–ø–æ—Ö–∏ –¥—Ä–µ–≤–Ω–µ–≥–æ –º–∏—Ä–∞!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω—ã</b>:"
    )

@dp.message(Command("new"))
async def new_chat(message: types.Message):
    user_id = message.from_user.id
    await clear_history(user_id)
    await answer_html(message, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω!‚öîÔ∏è")

@dp.message(Command("info"))
async def admin_status(message: types.Message):
    if message.chat.id != ADMIN_CHAT_ID:
        await answer_html(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    params = message.text.split(maxsplit=1)[1:]  # –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    args = params[0].split() if params else []

    countries = await get_all_active_countries()
    if not countries:
        await answer_html(message, "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        return

    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    countries_dict = {}
    for country_tuple in countries:
        user_id, country_name, country_desc, *aspect_values = country_tuple
        countries_dict[country_name.strip().lower()] = {
            "user_id": user_id,
            "country_name": country_name,
            "country_desc": country_desc,
            "aspects": aspect_values
        }

    aspect_labels = {a[0]: a[1] for a in ASPECTS}
    aspect_codes = list(aspect_labels.keys())

    # HELP
    if args and args[0].lower() in ("help", "—Å–ø—Ä–∞–≤–∫–∞", "?"):
        help_text = (
                "<b>/admin_status</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω –∏ –∞—Å–ø–µ–∫—Ç–æ–≤\n"
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
                "/admin_status ‚Äî –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã –∏ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã\n"
                "/admin_status <i>—Å—Ç—Ä–∞–Ω–∞</i> ‚Äî –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –ø–æ —Å—Ç—Ä–∞–Ω–µ\n"
                "/admin_status <i>–∞—Å–ø–µ–∫—Ç</i> ‚Äî —ç—Ç–æ—Ç –∞—Å–ø–µ–∫—Ç –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º\n"
                "/admin_status <i>—Å—Ç—Ä–∞–Ω–∞</i> <i>–∞—Å–ø–µ–∫—Ç</i> ‚Äî –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Å–ø–µ–∫—Ç —Å—Ç—Ä–∞–Ω—ã\n\n"
                "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã –∞—Å–ø–µ–∫—Ç–æ–≤:</b>\n" +
                "\n".join(f"<b>{code}</b>: {aspect_labels[code]}" for code in aspect_codes)
        )
        await send_html(bot, ADMIN_CHAT_ID, help_text)
        return

    # –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Äî –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã, –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã
    if not args:
        for country_tuple in countries:
            user_id, country_name, country_desc, *aspect_values = country_tuple
            await send_html(
                bot,
                ADMIN_CHAT_ID,
                f"üó∫ <b>–°—Ç—Ä–∞–Ω–∞:</b> {country_name} (ID: {user_id})"
            )
            await send_html(
                bot,
                ADMIN_CHAT_ID,
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{country_desc or '(–ù–µ—Ç)'}"
            )
            for (code, label, _), value in zip(ASPECTS, aspect_values):
                if value and value.strip():
                    await send_html(
                        bot,
                        ADMIN_CHAT_ID,
                        f"<b>{label}</b>:\n{stars_to_bold(value)}"
                    )
        return

    # –û–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: —Å—Ç—Ä–∞–Ω–∞ –∏–ª–∏ –∞—Å–ø–µ–∫—Ç
    if len(args) == 1:
        arg = args[0].lower()
        # –ü–æ–∏—Å–∫ –ø–æ –∞—Å–ø–µ–∫—Ç—É
        if arg in aspect_labels:
            idx = aspect_codes.index(arg)
            for country_tuple in countries:
                country_name = country_tuple[1]
                user_id = country_tuple[0]
                aspect_value = country_tuple[3 + idx]
                if aspect_value and aspect_value.strip():
                    await send_html(
                        bot, ADMIN_CHAT_ID,
                        f"<b>{country_name}</b> (ID: {user_id}):\n<b>{aspect_labels[arg]}</b>:\n{stars_to_bold(aspect_value)}"
                    )
            return
        # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–µ
        if arg in countries_dict:
            c = countries_dict[arg]
            await send_html(
                bot,
                ADMIN_CHAT_ID,
                f"üó∫ <b>–°—Ç—Ä–∞–Ω–∞:</b> {c['country_name']} (ID: {c['user_id']})"
            )
            await send_html(
                bot,
                ADMIN_CHAT_ID,
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{c['country_desc'] or '(–ù–µ—Ç)'}"
            )
            for (code, label, _), value in zip(ASPECTS, c["aspects"]):
                if value and value.strip():
                    await send_html(
                        bot, ADMIN_CHAT_ID, f"<b>{label}:</b>\n{stars_to_bold(value)}"
                    )
            return
        await answer_html(message, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ —Å—Ç—Ä–∞–Ω—ã, –Ω–∏ –∞—Å–ø–µ–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.")
        return

    # –î–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: —Å—Ç—Ä–∞–Ω–∞ –∏ –∞—Å–ø–µ–∫—Ç
    if len(args) == 2:
        country = args[0].lower()
        aspect = args[1].lower()
        if country not in countries_dict:
            await answer_html(message, "–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        if aspect not in aspect_labels:
            await answer_html(message, "–ê—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        idx = aspect_codes.index(aspect)
        value = countries_dict[country]["aspects"][idx]
        label = aspect_labels[aspect]
        if value and value.strip():
            await send_html(
                bot,
                ADMIN_CHAT_ID,
                f"<b>{label}</b> –¥–ª—è —Å—Ç—Ä–∞–Ω—ã <b>{countries_dict[country]['country_name']}</b>:\n{stars_to_bold(value)}"
            )
        else:
            await send_html(
                bot,
                ADMIN_CHAT_ID,
                f"–ê—Å–ø–µ–∫—Ç <b>{label}</b> –¥–ª—è —Å—Ç—Ä–∞–Ω—ã <b>{countries_dict[country]['country_name']}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
        return

    # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ–ª—å—à–µ –¥–≤—É—Ö
    await answer_html(
        message,
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –§–æ—Ä–º–∞—Ç—ã:\n/admin_status [—Å—Ç—Ä–∞–Ω–∞]\n/admin_status [–∞—Å–ø–µ–∫—Ç]\n/admin_status [—Å—Ç—Ä–∞–Ω–∞] [–∞—Å–ø–µ–∫—Ç]\n\n"
        "–î–ª—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏—Ç–µ /admin_status help"
    )

# –î–ª—è FSM (–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π)
class EditAspect(StatesGroup):
    waiting_new_value = State()

@dp.message(Command("edit"))
async def admin_edit(message: types.Message, state: FSMContext):
    if message.chat.id != ADMIN_CHAT_ID:
        await answer_html(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text.split(maxsplit=1)[1:]  # –≤—Å—ë –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not args:
        await answer_html(message, "–§–æ—Ä–º–∞—Ç: /edit <—Å—Ç—Ä–∞–Ω–∞> <–∞—Å–ø–µ–∫—Ç>")
        return
    parts = args[0].split()
    if len(parts) != 2:
        await answer_html(message, "–§–æ—Ä–º–∞—Ç: /edit <—Å—Ç—Ä–∞–Ω–∞> <–∞—Å–ø–µ–∫—Ç>")
        return

    country_name = parts[0].strip()
    aspect_code = parts[1].strip()
    # --- –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –≤ database.py ---
    user_id = await get_user_id_by_country(country_name)
    if not user_id:
        await answer_html(message, f'–°—Ç—Ä–∞–Ω–∞ "{country_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        return

    if aspect_code not in [a[0] for a in ASPECTS]:
        await answer_html(message, f'–ê—Å–ø–µ–∫—Ç "{aspect_code}" –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    current_value = await get_user_aspect(user_id, aspect_code)
    label = dict((a[0], a[1]) for a in ASPECTS)[aspect_code]
    await answer_html(
        message,
        f"<b>{label}</b> –¥–ª—è —Å—Ç—Ä–∞–Ω—ã <b>{country_name}</b>:\n\n{stars_to_bold(current_value or '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)')}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è, –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–ª—è FSM —á–µ–π –∏ –∫–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –º–µ–Ω—è–µ–º
    await state.set_state(EditAspect.waiting_new_value)
    await state.update_data(user_id=user_id, aspect_code=aspect_code, country_name=country_name)

@dp.message(Command("cancel"))
async def admin_edit_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await answer_html(message, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await answer_html(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@dp.message(EditAspect.waiting_new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data:
        await answer_html(message, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Å—Ç—Ä–∞–Ω–∞ –∏ –∞—Å–ø–µ–∫—Ç.")
        await state.clear()
        return

    user_id = data["user_id"]
    aspect_code = data["aspect_code"]
    country_name = data["country_name"]
    new_value = message.text.strip()

    await set_user_aspect(user_id, aspect_code, new_value)
    label = dict((a[0], a[1]) for a in ASPECTS)[aspect_code]

    await answer_html(
        message,
        f"<b>{label}</b> –¥–ª—è —Å—Ç—Ä–∞–Ω—ã <b>{country_name}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!"
    )
    await state.clear()

class ResetCountry(StatesGroup):
    confirming = State()

@dp.message(Command("reset_country"))
async def reset_country(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –°–ø–µ—Ä–≤–∞ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å
    await state.set_state(ResetCountry.confirming)
    await answer_html(
        message,
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –í–°–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–µ, –µ—ë –∞—Å–ø–µ–∫—Ç–∞—Ö –∏ –∏—Å—Ç–æ—Ä–∏–∏.\n\n"
        "–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ <b>–î–ê</b>.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )

@dp.message(ResetCountry.confirming)
async def confirm_reset_country(message: types.Message, state: FSMContext):
    text = message.text.strip().lower()
    user_id = message.from_user.id
    if text in ("–¥–∞", "yes", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"):
        await clear_history(user_id)
        await clear_user_aspects(user_id)
        await set_user_country(user_id, None)
        await set_user_country_desc(user_id, None)
        await set_aspect_index(user_id, None)
        await state.clear()
        await answer_html(
            message,
            "‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω—ã —Å–±—Ä–æ—à–µ–Ω–∞!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã</b> –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
        )
    else:
        await answer_html(
            message,
            "–í–≤–µ–¥–∏—Ç–µ <b>–î–ê</b>, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å, –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )


# –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º, –Ω–µ –∫–æ–º–∞–Ω–¥
@dp.message(F.text & ~F.text.startswith('/'))
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text.strip()

    # –õ–æ–≤–∏–º —ç—Ç–∞–ø –∏–≥—Ä—ã: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –æ–ø—Ä–æ—Å –∞—Å–ø–µ–∫—Ç–æ–≤, –∏–Ω–∞—á–µ: –∏–≥—Ä–æ–≤–æ–π –¥–∏–∞–ª–æ–≥
    country = await get_user_country(user_id)
    country_desc = await get_user_country_desc(user_id)

    if not country:
        await handle_country_name(message, user_id, user_text)
    elif not country_desc:
        await handle_country_desc(message, user_id, user_text)
    else:
        await handle_game_dialog(message, user_id, user_text)

async def handle_country_name(message: types.Message, user_id: int, user_text: str):
    await set_user_country(user_id, user_text)
    await answer_html(
        message,
        f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: <b>{user_text}</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É (–≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–∞—Ä–æ–¥, –∫—É–ª—å—Ç—É—Ä–∞, —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è):"
    )

async def handle_country_desc(message: types.Message, user_id: int, user_text: str):
    country = await get_user_country(user_id)
    chat_id = message.chat.id

    await answer_html(message, "–°–æ–∑–¥–∞—é –ø–æ–¥—Ä–æ–±–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    typing_task = asyncio.create_task(keep_typing(bot, chat_id))

    loop = asyncio.get_event_loop()
    user_name = message.from_user.username
    await send_html(
        bot,
        ADMIN_CHAT_ID,
        f"üì® –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {user_name}:\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:</b> {country}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:</b>\n{user_text.strip()}\n\n"
    )
    all_aspects = []

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª—å—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    for code, label, prompt in ASPECTS:
        aspect_prompt = (
            f"{GAME_PROMPT}"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: {country}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: {user_text.strip()}\n"
            f"{prompt}"
        )
        aspect_value = await loop.run_in_executor(
            executor,
            model_handler.generate_short_responce,
            aspect_prompt,
        )
        await answer_html(
            message,
            f"<b>{label}</b> —Å—Ç—Ä–∞–Ω—ã {country}: {aspect_value}{"" if aspect_value.endswith(".") else "."}"
        )
        await send_html(
            bot,
            ADMIN_CHAT_ID,
            f"<b>{label}</b> —Å—Ç—Ä–∞–Ω—ã {country}: {aspect_value}{"" if aspect_value.endswith(".") else "."}"
        )
        await set_user_aspect(user_id, code, aspect_value)
        all_aspects.append(aspect_value)

    desc_prompt = (
        f"{GAME_PROMPT}"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: {country}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: {user_text.strip()}\n"
        f"{"\n".join(all_aspects)}"
        "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: "
    )
    description = await loop.run_in_executor(
        executor,
        model_handler.generate_short_responce,
        desc_prompt,
    )
    await send_html(
        bot,
        ADMIN_CHAT_ID,
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b> —Å—Ç—Ä–∞–Ω—ã {country}: {description}{"" if description.endswith(".") else "."}"
    )
    await set_user_country_desc(user_id, description)

    typing_task.cancel()

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É —Ä–µ–∂–∏–º—É
    await answer_html(
        message,
        f"–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å—Ç—Ä–∞–Ω—ã <b>{country}</b>.\n"
        f"–¢—ã –º–æ–∂–µ—à—å –æ—Ç–¥–∞–≤–∞—Ç—å –ø—Ä–∏–∫–∞–∑—ã, –æ–±—ä—è–≤–ª—è—Ç—å –≤–æ–π–Ω—ã, —Å—Ç—Ä–æ–∏—Ç—å –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏.\n"
        f"–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–π /new —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç."
        "\n\n–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º?"
    )

async def handle_game_dialog(message: types.Message, user_id: int, user_text: str):
    chat_id = message.chat.id
    user_name = message.from_user.username

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {user_name}: {user_text[:50]}...")
    try:
        await bot.send_chat_action(chat_id=chat_id, action="typing")
        typing_task = asyncio.create_task(keep_typing(bot, chat_id))
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        country_name = await get_user_country(user_id)
        country_desc = await get_user_country_desc(user_id)

        assistant_reply, context = await asyncio.get_event_loop().run_in_executor(
            executor,
            model_handler.sync_generate_response,
            user_id, user_text, RPG_PROMPT, country_name, country_desc, HISTORY_LIMIT
        )
        logger.info(f"–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        typing_task.cancel()
        html_reply = stars_to_bold(assistant_reply)
        await answer_html(message, html_reply)

        await send_html(
            bot,
            ADMIN_CHAT_ID,
            f"üì® –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {user_name}:\n\n"
            f"<b>–ü—Ä–æ–º–ø—Ç, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ –º–æ–¥–µ–ª—å:</b>\n"
            f"<code>{context}</code>\n\n"
            f"<b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:</b>\n"
            f"<code>{assistant_reply}</code>"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await answer_html(message, f"–û—à–∏–±–∫–∞: {str(e)}")

async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
