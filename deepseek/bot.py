import asyncio
import logging
from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from transformers import AutoModelForCausalLM, AutoTokenizer
from database import init_db, get_history, update_history, clear_history
import torch
from concurrent.futures import ThreadPoolExecutor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
HISTORY_LIMIT = int(os.getenv("HISTORY_LIMIT", 10))

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
model_name = "deepseek-ai/DeepSeek-R1-Distill-Qwen-32B"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    device_map="auto",
    torch_dtype=torch.float16,
    use_flash_attention_2=False
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
device_info = f"–ú–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {model.device}"
logger.info(device_info)
cuda_available = torch.cuda.is_available()
logger.info(f"CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {cuda_available}")

if cuda_available:
    cuda_device_count = torch.cuda.device_count()
    cuda_device_name = torch.cuda.get_device_name(0) if cuda_device_count > 0 else "–ù–µ—Ç"
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {cuda_device_count}")
    logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ GPU: {cuda_device_name}")
    logger.info(f"–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –ø–∞–º—è—Ç–∏: {torch.cuda.memory_allocated() / 1024**2:.2f} –ú–ë")
    logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è GPU –ø–∞–º—è—Ç—å: {torch.cuda.get_device_properties(0).total_memory / 1024**2:.2f} –ú–ë")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

executor = ThreadPoolExecutor(max_workers=1)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class CountryRegistration(StatesGroup):
    waiting_for_name = State()
    waiting_for_government = State()
    waiting_for_resources = State()
    waiting_for_goals = State()

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
SYSTEM_PROMPT = """
–¢—ã - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏ –º—É–¥—Ä—ã–π —Å—É–¥—å—è –≤ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –†–ü–ì-–∏–≥—Ä–µ, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–≥—Ä–∞—é—Ç –∑–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏—Ö –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.
–£—á–∏—Ç—ã–≤–∞–π —ç–∫–æ–Ω–æ–º–∏–∫—É, –¥–∏–ø–ª–æ–º–∞—Ç–∏—é, –≤–æ–µ–Ω–Ω—É—é –º–æ—â—å, —Ä–µ—Å—É—Ä—Å—ã –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö.
–ë—É–¥—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º, –Ω–µ –æ—Ç–¥–∞–≤–∞–π –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ —Å—Ç—Ä–∞–Ω.
–û–ø–∏—Å—ã–≤–∞–π –º–∏—Ä –≤ –¥–µ—Ç–∞–ª—è—Ö, –ø–æ–º–æ–≥–∞–π –∏–≥—Ä–æ–∫–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∏—Ö –∏—Å—Ç–æ—Ä–∏–∏.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - –∫–∞–∂–¥–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π.
"""

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await clear_history(message.from_user.id)
    await message.answer(
        "üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –†–ü–ì! üåç\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–æ–π, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–∏—Ä–æ–º –∏ –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã. –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞?"
    )
    await state.set_state(CountryRegistration.waiting_for_name)

@dp.message(CountryRegistration.waiting_for_name)
async def process_country_name(message: types.Message, state: FSMContext):
    await state.update_data(country_name=message.text)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è {message.text}.\n\n"
        "–ö–∞–∫–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–µ–º–æ–∫—Ä–∞—Ç–∏—è, –º–æ–Ω–∞—Ä—Ö–∏—è, –¥–∏–∫—Ç–∞—Ç—É—Ä–∞ –∏ —Ç.–¥.)"
    )
    await state.set_state(CountryRegistration.waiting_for_government)

@dp.message(CountryRegistration.waiting_for_government)
async def process_government(message: types.Message, state: FSMContext):
    await state.update_data(government=message.text)
    await message.answer(
        f"–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ - {message.text}.\n\n"
        "–ö–∞–∫–∏–º–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –∏–Ω–¥—É—Å—Ç—Ä–∏—è–º–∏ –æ–±–ª–∞–¥–∞–µ—Ç –≤–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞?"
    )
    await state.set_state(CountryRegistration.waiting_for_resources)

@dp.message(CountryRegistration.waiting_for_resources)
async def process_resources(message: types.Message, state: FSMContext):
    await state.update_data(resources=message.text)
    await message.answer(
        "–ö–∞–∫–∏–µ –≥–ª–∞–≤–Ω—ã–µ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏ –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç –≤–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞? –ö–∞–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–æ—Å–µ–¥—è–º–∏?"
    )
    await state.set_state(CountryRegistration.waiting_for_goals)

@dp.message(CountryRegistration.waiting_for_goals)
async def process_goals(message: types.Message, state: FSMContext):
    await state.update_data(goals=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    country_name = data.get("country_name")
    government = data.get("government")
    resources = data.get("resources")
    goals = data.get("goals")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
    country_description = (
        f"–°—Ç—Ä–∞–Ω–∞ –∏–≥—Ä–æ–∫–∞: {country_name}\n"
        f"–§–æ—Ä–º–∞ –ø—Ä–∞–≤–ª–µ–Ω–∏—è: {government}\n"
        f"–†–µ—Å—É—Ä—Å—ã –∏ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏: {resources}\n"
        f"–ì–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏: {goals}"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    initial_message = (
        "–ò–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É –≤ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –†–ü–ì.\n"
        f"{country_description}"
    )

    await update_history(message.from_user.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω—ã", initial_message, HISTORY_LIMIT)

    await message.answer(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ {country_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üéâ\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–∏—Ä–æ–º. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, "
        "–ø–ª–∞–Ω—ã –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new."
    )

    await state.clear()

@dp.message(Command("new"))
async def new_chat(message: types.Message, state: FSMContext):
    await clear_history(message.from_user.id)
    await message.answer("‚öîÔ∏è –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. ‚öîÔ∏è")
    await message.answer("–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

@dp.message(F.text)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_text = message.text

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_text[:50]}...")
    try:
        await bot.send_chat_action(chat_id=chat_id, action="typing")
        loop = asyncio.get_event_loop()
        typing_task = asyncio.create_task(keep_typing(chat_id))
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        assistant_reply = await loop.run_in_executor(executor, sync_generate_response, user_id, user_text)
        logger.info(f"–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        typing_task.cancel()
        await message.answer(assistant_reply)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

async def keep_typing(chat_id):
    try:
        typing_count = 0
        while True:
            await bot.send_chat_action(chat_id=chat_id, action="typing")
            typing_count += 1
            await asyncio.sleep(3)
    except asyncio.CancelledError:
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ keep_typing: {str(e)}", exc_info=True)

def sync_generate_response(user_id, message_text):
    import asyncio
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        history = loop.run_until_complete(get_history(user_id))

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        context = SYSTEM_PROMPT + "\n\n" + '\n'.join(history + [f"–ò–≥—Ä–æ–∫: {message_text}"]) + "\n–°—É–¥—å—è –∏–≥—Ä—ã:"

        inputs = tokenizer(context, return_tensors="pt").to(model.device)
        outputs = model.generate(
            **inputs,
            max_new_tokens=512,
            do_sample=True,
            temperature=0.7,
            top_p=0.95,
            eos_token_id=tokenizer.eos_token_id,
            pad_token_id=tokenizer.eos_token_id
        )
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        assistant_reply = response[len(context):].strip()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        if '\n' in assistant_reply:
            assistant_reply = '\n'.join([line for line in assistant_reply.split('\n')
                                         if not line.strip().startswith('–ò–≥—Ä–æ–∫:') and not line.strip().startswith('User:')])

        loop.run_until_complete(update_history(user_id, message_text, assistant_reply, HISTORY_LIMIT))
        loop.close()
        return assistant_reply
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_response: {str(e)}", exc_info=True)
        raise

async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
