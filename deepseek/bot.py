import asyncio
import logging
from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from concurrent.futures import ThreadPoolExecutor
from model_handler import ModelHandler
from database import *
from parsing import stars_to_bold
from utils import *

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
HISTORY_LIMIT = int(os.getenv("HISTORY_LIMIT", 4))
MAX_NEW_TOKENS = int(os.getenv("MAX_NEW_TOKENS", 512))

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

# Initialize model handler
model_handler = ModelHandler(MAX_NEW_TOKENS)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

executor = ThreadPoolExecutor(max_workers=1)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–æ–ª–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
RPG_PROMPT = (
    "–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π —Ä–æ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–≥—Ä—ã –≤ —Å—Ç–∏–ª–µ –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∏ –¥—Ä–µ–≤–Ω–µ–≥–æ –º–∏—Ä–∞. "
    "–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–æ–π, —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –µ—ë —ç–∫–æ–Ω–æ–º–∏–∫—É, –¥–∏–ø–ª–æ–º–∞—Ç–∏—é "
    "–∏ –∞—Ä–º–∏—é, —Å—Ç—Ä–æ–∏—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–æ—Å–µ–¥—è–º–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è. "
    "–¶–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ—Ü–≤–µ—Ç–∞—é—â–µ–π –∏ –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π, "
    "–ª—é–±–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è! –¢—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, "
    "–æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –æ—Ç –ª–∏—Ü–∞ –º–∞—Å—Ç–µ—Ä–∞ –∏–≥—Ä—ã, —á–µ—Ç–∫–æ —Å–ª–µ–¥—É—è –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫–æ–º —Å–µ—Ç—Ç–∏–Ω–≥—É, "
    "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç—Å—Ç—É–ø–∞–µ—à—å –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏."
)

@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    await clear_history(user_id)
    await set_user_state(user_id, 'waiting_for_country_name')
    await set_user_country(user_id, None)
    await set_user_country_desc(user_id, None)
    await answer_html(
        message,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–æ–ª–µ–≤—É—é –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É —ç–ø–æ—Ö–∏ –¥—Ä–µ–≤–Ω–µ–≥–æ –º–∏—Ä–∞!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω—ã:"
    )

@dp.message(Command("new"))
async def new_chat(message: types.Message):
    user_id = message.from_user.id
    await clear_history(user_id)
    await clear_user_state(user_id)
    await set_user_country(user_id, None)
    await set_user_country_desc(user_id, None)
    await answer_html(message, "‚öîÔ∏è–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω!‚öîÔ∏è")

@dp.message(Command("admin_status"))
async def admin_status(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.chat.id != ADMIN_CHAT_ID:
        await answer_html(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∞—Ö —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    countries = await get_all_active_countries()

    if not countries:
        await answer_html(message, "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
    for user_id, country_name, status in countries:
        await answer_html(
            message,
            f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {country_name}\n"
            f"<b>ID –∏–≥—Ä–æ–∫–∞:</b> {user_id}\n\n"
            f"<b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n{stars_to_bold(status)}"
        )

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï –∫–æ–º–∞–Ω–¥)
@dp.message(F.text & ~F.text.startswith('/'))
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text
    state = await get_user_state(user_id)

    if state == 'waiting_for_country_name':
        await handle_country_name(message, user_id, user_text)
    elif state == 'waiting_for_country_desc':
        await handle_country_desc(message, user_id, user_text)
    else:
        await handle_game_dialog(message, user_id, user_text)

async def handle_country_name(message: types.Message, user_id: int, user_text: str):
    await set_user_country(user_id, user_text.strip())
    await set_user_state(user_id, 'waiting_for_country_desc')
    await answer_html(
        message,
        f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: <b>{user_text.strip()}</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω—É (–≥–µ–æ–≥—Ä–∞—Ñ–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–∞—Ä–æ–¥, –∫—É–ª—å—Ç—É—Ä–∞, —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è):"
    )

async def handle_country_desc(message: types.Message, user_id: int, user_text: str):
    await set_user_country_desc(user_id, user_text.strip())
    country = await get_user_country(user_id)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    await answer_html(message, "–°–æ–∑–¥–∞—é –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã...")
    chat_id = message.chat.id
    typing_task = asyncio.create_task(keep_typing(bot, chat_id))

    initial_status_prompt = (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: '{country}'\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: {user_text.strip()}\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –≤ –∏–≥—Ä–µ (—ç–∫–æ–Ω–æ–º–∏–∫–∞, –∫—É–ª—å—Ç—É—Ä–∞, –∞—Ä–º–∏—è, —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏):"
    )

    loop = asyncio.get_event_loop()
    country_status = await loop.run_in_executor(
        executor,
        model_handler.generate_short_responce,
        initial_status_prompt,
    )
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã {country}: {country_status}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
    await set_country_status(user_id, country_status)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
    await answer_html(
        message,
        f"<b>–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã:</b>\n\n{stars_to_bold(country_status)}"
    )
    user_name = message.from_user.username
    await send_html(
        ADMIN_CHAT_ID,
        f"üì® –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {user_name}:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: <b>{country}</b>\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:\n{user_text}\n\n"
        f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:</b>\n"
        f"{country_status}"
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ
    await set_user_state(user_id, None)  # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await answer_html(
        message,
        f"–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å—Ç—Ä–∞–Ω—ã <b>{country}</b>.\n"
        f"–¢—ã –º–æ–∂–µ—à—å –æ—Ç–¥–∞–≤–∞—Ç—å –ø—Ä–∏–∫–∞–∑—ã, –æ–±—ä—è–≤–ª—è—Ç—å –≤–æ–π–Ω—ã, —Å—Ç—Ä–æ–∏—Ç—å –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏.\n"
        f"–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–π /new —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç."
        "\n\n–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º?"
    )
    typing_task.cancel()

async def handle_game_dialog(message: types.Message, user_id: int, user_text: str):
    chat_id = message.chat.id
    user_name = message.from_user.username
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {user_name}: {user_text[:50]}...")

    try:
        await bot.send_chat_action(chat_id=chat_id, action="typing")
        typing_task = asyncio.create_task(keep_typing(bot, chat_id))
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
        country_name = await get_user_country(user_id)
        country_desc = await get_user_country_desc(user_id)
        assistant_reply, context = await asyncio.get_event_loop().run_in_executor(
            executor,
            model_handler.sync_generate_response,
            user_id, user_text, RPG_PROMPT, country_name, country_desc, HISTORY_LIMIT
        )
        logger.info(f"–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        typing_task.cancel()
        html_reply = stars_to_bold(assistant_reply)

        await answer_html(message, html_reply)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        await send_html(
            ADMIN_CHAT_ID,
            f"üì® –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {user_name}:\n\n"
            f"<b>–ü—Ä–æ–º–ø—Ç, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ –º–æ–¥–µ–ª—å:</b>\n"
            f"<code>{context}</code>\n\n"
            f"<b>–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:</b>\n"
            f"<code>{assistant_reply}</code>"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await answer_html(message, f"–û—à–∏–±–∫–∞: {str(e)}")

async def update_country_status(user_id, country_name, country_desc, action):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞"""
    current_status = await get_country_status(user_id)

    status_update_prompt = (
        f"–°—Ç—Ä–∞–Ω–∞: {country_name}\n"
        f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:\n{current_status}\n\n"
        f"–ò–≥—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ: {action}\n\n"
        f"–û–±–Ω–æ–≤–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. "
        f"–°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–æ –∏–∑–º–µ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏."
    )

    loop = asyncio.get_event_loop()
    new_status, _ = await loop.run_in_executor(
        executor,
        model_handler.sync_generate_response,
        user_id, status_update_prompt, RPG_PROMPT, country_name, country_desc, HISTORY_LIMIT
    )

    await set_country_status(user_id, new_status)
    return new_status

async def main():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
