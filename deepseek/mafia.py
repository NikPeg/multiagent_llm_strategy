import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv
from random import sample, shuffle, randint

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

NAMES = [
    "–ò–≤–∞–Ω", "–ü–µ—Ç—Ä", "–ê–ª–µ–∫—Å–µ–π", "–î–º–∏—Ç—Ä–∏–π", "–°–µ—Ä–≥–µ–π", "–ú–∏—Ö–∞–∏–ª",
    "–ê–Ω–¥—Ä–µ–π", "–í–ª–∞–¥–∏–º–∏—Ä", "–ê—Ä—Ç–µ–º", "–ù–∏–∫–æ–ª–∞–π", "–ï–≥–æ—Ä", "–ò–≥–æ—Ä—å",
    "–§–µ–¥–æ—Ä", "–ì–ª–µ–±", "–ú–∞–∫—Å–∏–º", "–†–æ–º–∞–Ω", "–ì—Ä–∏–≥–æ—Ä–∏–π", "–õ–µ–≤"
]

PLAYER_PROMPTS = [
    "–¢—ã –æ–±—ã—á–Ω—ã–π –∂–∏—Ç–µ–ª—å –¥–µ—Ä–µ–≤–Ω–∏, –≤–µ–¥–∏ —Å–µ–±—è –∏—Å–∫—Ä–µ–Ω–Ω–µ –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —É–±–µ–¥–∏—Ç—å –¥—Ä—É–≥–∏—Ö, —á—Ç–æ —Ç—ã –Ω–µ –º–∞—Ñ–∏—è.",
    "–¢—ã –º–∞—Ñ–∏—è, —Å—Ç–∞—Ä–∞–π—Å—è —É–±–µ–¥–∏—Ç—å –≤—Å–µ—Ö, —á—Ç–æ —Ç—ã –æ–±—ã—á–Ω—ã–π –∂–∏—Ç–µ–ª—å, –Ω–µ –≤—ã–¥–∞–≤–∞—è —Å–µ–±—è.",
]

game = {}

async def send_typing(chat_id):
    try:
        while True:
            await bot.send_chat_action(chat_id, "typing")
            await asyncio.sleep(2)
    except asyncio.CancelledError:
        pass

@dp.message(Command("start"))
async def start(message: types.Message):
    game.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ú–∞—Ñ–∏—è'. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (–æ—Ç 4 –¥–æ 12):")
    game['state'] = 'wait_players'

@dp.message()
async def handler(message: types.Message):
    user_text = message.text.strip()
    if game.get('state') == 'wait_players':
        try:
            n_players = int(user_text)
            if 4 <= n_players <= 12:
                game['n_players'] = n_players
                await message.answer("–°–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Ñ–∏–π (1 –∏–ª–∏ 2)?")
                game['state'] = 'wait_mafia'
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 4 –¥–æ 12")
        except:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    if game.get('state') == 'wait_mafia':
        try:
            n_mafia = int(user_text)
            if n_mafia not in (1, 2) or n_mafia >= game['n_players']:
                await message.answer("–ú–∞—Ñ–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1 –∏–ª–∏ 2, –∏ –º–µ–Ω—å—à–µ —á–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤.")
                return
            await setup_game(message, game['n_players'], n_mafia)
        except:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ 1 –∏–ª–∏ 2.")
        return

    if user_text.lower() == "–¥–∞–ª–µ–µ" and game.get('state') == 'game':
        await next_player_phase(message)
        return

    if user_text.lower() == "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ" and game.get('state') == 'game':
        await voting_phase(message)
        return

async def setup_game(message, n_players, n_mafia):
    names = sample(NAMES, n_players)
    mafia_indices = sample(range(n_players), n_mafia)
    roles = ["–º–∞—Ñ–∏—è" if i in mafia_indices else "–º–∏—Ä–Ω—ã–π" for i in range(n_players)]
    prompts = []
    for i in range(n_players):
        if i in mafia_indices:
            mafia_names = [names[j] for j in mafia_indices if j != i]
            if mafia_names:
                info = "–¢—ã –º–∞—Ñ–∏—è. –î—Ä—É–≥–∏–µ –º–∞—Ñ–∏–∏: " + ", ".join(mafia_names) + "."
            else:
                info = "–¢—ã –º–∞—Ñ–∏—è. –¢—ã –æ–¥–∏–Ω –≤ –∫–æ–º–∞–Ω–¥–µ –º–∞—Ñ–∏–∏."
            prompts.append(info + " " + PLAYER_PROMPTS[1])
        else:
            prompts.append("–¢—ã –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å. " + PLAYER_PROMPTS[0])

    game.update({
        'names': names,
        'roles': roles,
        'prompts': prompts,
        'step': 0,
        'state': 'game',
        'alive': [True] * n_players
    })

    awaiting = []
    for i, (name, role, prompt) in enumerate(zip(names, roles, prompts)):
        txt = f"–ò–≥—Ä–æ–∫ {name}: {prompt}"
        awaiting.append(txt)
    await message.answer("–†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–¥–∞–ª–µ–µ', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. –î–∞–ª–µ–µ –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å —Å–≤–æ—é —Ä–µ—á—å.")
    await bot.send_message(ADMIN_CHAT_ID, "–ó–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é.\n" + "\n\n".join(awaiting))

async def next_player_phase(message):
    names = game['names']
    prompts = game['prompts']
    roles = game['roles']
    step = game['step']
    alive = game['alive']
    total = len(names)

    while step < total and not alive[step]:
        game['step'] += 1
        step = game['step']

    if step >= total:
        await message.answer("–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã—Å—Ç—É–ø–∏–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ' —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é.")
        return

    name = names[step]
    speech = await generate_fake_speech(name, prompts[step], roles[step])
    await send_to_admin_and_user(message, f"üó£ <b>{name}:</b>\n{speech}")
    game['step'] += 1

async def generate_fake_speech(name, prompt, role):
    dummy = [
        f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {name}. –Ø —Å—á–∏—Ç–∞—é, —á—Ç–æ –≥–æ—Ä–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–ø–ª–æ—Ç–∏—Ç—å—Å—è –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫—Ç–æ –º–∞—Ñ–∏—è.",
        f"{name}: –Ø –Ω–µ–≤–∏–Ω–æ–≤–µ–Ω, –Ω–æ –∫—Ç–æ-—Ç–æ –∏–∑ –Ω–∞—Å –∏–≥—Ä–∞–µ—Ç –Ω–µ –æ—á–µ–Ω—å —á–µ—Å—Ç–Ω–æ.",
        f"{name}: –ú–∏—Ä–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ, —É –º–µ–Ω—è –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –Ω–∞ —Ç–µ—Ö, –∫—Ç–æ —Å–ª–∏—à–∫–æ–º –º–æ–ª—á–∏—Ç.",
        f"{name}: –Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –º–∞—Ñ–∏—è —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å—Ä–µ–¥–∏ –Ω–∞—Å –∏ –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–ø—É—Ç–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä.",
        f"{name}: –í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –Ω–∞–¥–æ —Å–ª—É—à–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –≤ —ç—Ç–æ–π –¥–∏—Å–∫—É—Å—Å–∏–∏.",
    ]
    if role == "–º–∞—Ñ–∏—è":
        idx = randint(0, len(dummy) - 1)
        return dummy[idx] + " " + "–Ø –±—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –∫ —Å–∞–º–æ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –≥–æ–ª–æ—Å—É—é—â–µ–º—É."
    else:
        idx = randint(0, len(dummy) - 1)
        return dummy[idx]

async def voting_phase(message):
    names = game['names']
    alive = game['alive']
    surviving_indices = [i for i, a in enumerate(alive) if a]
    shuffle(surviving_indices)
    votes = {}
    n_alive = len(surviving_indices)
    for i in surviving_indices:
        candidates = [j for j in surviving_indices if j != i]
        target = candidates[randint(0, len(candidates) - 1)]
        votes.setdefault(target, []).append(i)
    results = []
    for voted, voters in votes.items():
        voter_names = ", ".join([names[i] for i in voters])
        results.append(f"–ó–∞ {names[voted]} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {voter_names}")
    most_voted = max(votes.items(), key=lambda x: len(x[1]))[0]
    game['alive'][most_voted] = False
    game['step'] = 0
    await send_to_admin_and_user(message, "<b>–ì–æ–ª–æ—Å–∞:</b>\n" + "\n".join(results))
    await send_to_admin_and_user(message, f"<b>{names[most_voted]} –≤—ã–±—ã–ª –∏–∑ –∏–≥—Ä—ã!</b>")
    survivors = [names[i] for i, a in enumerate(game['alive']) if a]
    if sum([game['roles'][i] == '–º–∞—Ñ–∏—è' and game['alive'][i] for i in range(len(names))]) == 0:
        await send_to_admin_and_user(message, "–ú–∏—Ä–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
        game['state'] = 'over'
        return
    elif sum([game['roles'][i] == '–º–∏—Ä–Ω—ã–π' and game['alive'][i] for i in range(len(names))]) <= sum([game['roles'][i] == '–º–∞—Ñ–∏—è' and game['alive'][i] for i in range(len(names))]):
        await send_to_admin_and_user(message, "–ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
        game['state'] = 'over'
        return
    else:
        await send_to_admin_and_user(message, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–≥. –í–≤–µ–¥–∏—Ç–µ '–¥–∞–ª–µ–µ'.")

async def send_to_admin_and_user(message, text):
    await message.answer(text, parse_mode="HTML")
    await bot.send_message(ADMIN_CHAT_ID, text, parse_mode="HTML")

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
