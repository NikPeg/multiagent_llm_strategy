import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from dotenv import load_dotenv
from random import sample, shuffle, randint
from concurrent.futures import ThreadPoolExecutor
from model_handler import ModelHandler
from utils import try_send_html

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
executor = ThreadPoolExecutor(max_workers=1)
model_handler = ModelHandler(max_new_tokens=128)

NAMES = [
    "–ò–≤–∞–Ω", "–ü–µ—Ç—Ä", "–ê–ª–µ–∫—Å–µ–π", "–î–º–∏—Ç—Ä–∏–π", "–°–µ—Ä–≥–µ–π", "–ú–∏—Ö–∞–∏–ª",
    "–ê–Ω–¥—Ä–µ–π", "–í–ª–∞–¥–∏–º–∏—Ä", "–ê—Ä—Ç–µ–º", "–ù–∏–∫–æ–ª–∞–π", "–ï–≥–æ—Ä", "–ò–≥–æ—Ä—å",
    "–§–µ–¥–æ—Ä", "–ì–ª–µ–±", "–ú–∞–∫—Å–∏–º", "–†–æ–º–∞–Ω", "–ì—Ä–∏–≥–æ—Ä–∏–π", "–õ–µ–≤"
]

PLAYER_PROMPTS = [
    "–¢—ã –æ–±—ã—á–Ω—ã–π –∂–∏—Ç–µ–ª—å –¥–µ—Ä–µ–≤–Ω–∏, –≤–µ–¥–∏ —Å–µ–±—è –∏—Å–∫—Ä–µ–Ω–Ω–µ –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —É–±–µ–¥–∏—Ç—å –¥—Ä—É–≥–∏—Ö, —á—Ç–æ —Ç—ã –Ω–µ –º–∞—Ñ–∏—è. –í—ã—Å–∫–∞–∂–∏ —Å–≤–æ—é —Ä–µ—á—å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏.",
    "–¢—ã –º–∞—Ñ–∏—è, —Å—Ç–∞—Ä–∞–π—Å—è —É–±–µ–¥–∏—Ç—å –≤—Å–µ—Ö, —á—Ç–æ —Ç—ã –æ–±—ã—á–Ω—ã–π –∂–∏—Ç–µ–ª—å. –í—ã—Å–∫–∞–∂–∏ —Å–≤–æ—é —Ä–µ—á—å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏, –Ω–µ –≤—ã–¥–∞–≤–∞—è —Å–µ–±—è."
]

def get_next_button():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–î–∞–ª–µ–µ")]], resize_keyboard=True)

def get_vote_button():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")]], resize_keyboard=True)

def remove_keyboard():
    return ReplyKeyboardRemove()

game = {}

async def send_typing(chat_id):
    try:
        while True:
            await bot.send_chat_action(chat_id, "typing")
            await asyncio.sleep(2)
    except asyncio.CancelledError:
        pass

@dp.message(Command("start"))
async def start(message: types.Message):
    game.clear()
    await try_send_html(
        message,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ú–∞—Ñ–∏—è'. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (–æ—Ç 4 –¥–æ 12):",
        reply_markup=remove_keyboard()
    )
    game['state'] = 'wait_players'

@dp.message()
async def handler(message: types.Message):
    user_text = message.text.strip()
    if game.get('state') == 'wait_players':
        try:
            n_players = int(user_text)
            if 4 <= n_players <= 12:
                game['n_players'] = n_players
                await try_send_html(message, "–°–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Ñ–∏–π (1 –∏–ª–∏ 2)?")
                game['state'] = 'wait_mafia'
            else:
                await try_send_html(message, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 4 –¥–æ 12")
        except:
            await try_send_html(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    if game.get('state') == 'wait_mafia':
        try:
            n_mafia = int(user_text)
            if n_mafia not in (1, 2) or n_mafia >= game['n_players']:
                await try_send_html(message, "–ú–∞—Ñ–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1 –∏–ª–∏ 2, –∏ –º–µ–Ω—å—à–µ —á–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤.")
                return
            await setup_game(message, game['n_players'], n_mafia)
        except:
            await try_send_html(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ 1 –∏–ª–∏ 2.")
        return

    if user_text.lower() == "–¥–∞–ª–µ–µ" and game.get('state') == 'game':
        await next_player_phase(message)
        return

    if user_text.lower() == "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ" and game.get('state') == 'game':
        await voting_phase(message)
        return

async def setup_game(message, n_players, n_mafia):
    names = sample(NAMES, n_players)
    mafia_indices = sample(range(n_players), n_mafia)
    roles = ["–º–∞—Ñ–∏—è" if i in mafia_indices else "–º–∏—Ä–Ω—ã–π" for i in range(n_players)]
    prompts = []
    for i in range(n_players):
        if i in mafia_indices:
            mafia_names = [names[j] for j in mafia_indices if j != i]
            if mafia_names:
                info = f"–¢—ã –º–∞—Ñ–∏—è. –î—Ä—É–≥–∏–µ –º–∞—Ñ–∏–∏: {', '.join(mafia_names)}."
            else:
                info = "–¢—ã –º–∞—Ñ–∏—è. –¢—ã –æ–¥–∏–Ω –≤ –∫–æ–º–∞–Ω–¥–µ –º–∞—Ñ–∏–∏."
            prompts.append(info + " " + PLAYER_PROMPTS[1])
        else:
            prompts.append("–¢—ã –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å. " + PLAYER_PROMPTS[0])

    game.update({
        'names': names,
        'roles': roles,
        'prompts': prompts,
        'step': 0,
        'state': 'game',
        'alive': [True] * n_players
    })

    awaiting = []
    for i, (name, role, prompt) in enumerate(zip(names, roles, prompts)):
        txt = f"–ò–≥—Ä–æ–∫ {name}: {prompt}"
        awaiting.append(txt)
    await try_send_html(
        message,
        "–†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É. –î–∞–ª–µ–µ –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å —Å–≤–æ—é —Ä–µ—á—å.",
        reply_markup=get_next_button()
    )
    await try_send_html(
        types.SimpleNamespace(answer=lambda text, **kwargs: bot.send_message(ADMIN_CHAT_ID, text, **kwargs)),
        "–ó–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é.\n" + "\n\n".join(awaiting)
    )

async def next_player_phase(message):
    names = game['names']
    prompts = game['prompts']
    roles = game['roles']
    step = game['step']
    alive = game['alive']
    total = len(names)

    while step < total and not alive[step]:
        game['step'] += 1
        step = game['step']

    if step >= total:
        await try_send_html(
            message,
            "–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã—Å—Ç—É–ø–∏–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ' —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é.",
            reply_markup=get_vote_button()
        )
        return

    name = names[step]
    prompt = prompts[step]
    role = roles[step]
    aspect_prompt = f"–¢—ã –∏–≥—Ä–æ–∫ {name}, —Ç–≤–æ—è —Ä–æ–ª—å: {role}. –í–æ—Ç —Ç–≤–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {prompt}\n–°–∫–∞–∂–∏ —Å–≤–æ—é —Ä–µ—á—å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏."
    typing_task = asyncio.create_task(send_typing(message.chat.id))
    loop = asyncio.get_event_loop()
    speech = await loop.run_in_executor(
        executor,
        model_handler.generate_short_responce,
        aspect_prompt
    )
    typing_task.cancel()

    await try_send_html(
        message,
        f"üó£ <b>{name}:</b>\n{speech}",
        reply_markup=get_next_button()
    )
    admin_report = (
        f"–ü—Ä–æ–º–ø—Ç, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ –º–æ–¥–µ–ª—å:\n"
        f"{aspect_prompt}\n\n"
        f"üó£ <b>{name}:</b>\n"
        f"{speech}"
    )
    await try_send_html(
        types.SimpleNamespace(answer=lambda text, **kwargs: bot.send_message(ADMIN_CHAT_ID, text, **kwargs)),
        admin_report
    )
    game['step'] += 1

async def voting_phase(message):
    names = game['names']
    alive = game['alive']
    surviving_indices = [i for i, a in enumerate(alive) if a]
    shuffle(surviving_indices)
    votes = {}
    n_alive = len(surviving_indices)
    for i in surviving_indices:
        candidates = [j for j in surviving_indices if j != i]
        target = candidates[randint(0, len(candidates) - 1)]
        votes.setdefault(target, []).append(i)
    results = []
    for voted, voters in votes.items():
        voter_names = ", ".join([names[i] for i in voters])
        results.append(f"–ó–∞ {names[voted]} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {voter_names}")
    most_voted = max(votes.items(), key=lambda x: len(x[1]))[0]
    game['alive'][most_voted] = False
    game['step'] = 0
    await try_send_html(
        message,
        "<b>–ì–æ–ª–æ—Å–∞:</b>\n" + "\n".join(results),
        reply_markup=get_next_button()
    )
    await try_send_html(
        message,
        f"<b>{names[most_voted]} –≤—ã–±—ã–ª –∏–∑ –∏–≥—Ä—ã!</b>",
        reply_markup=get_next_button()
    )
    await try_send_html(
        types.SimpleNamespace(answer=lambda text, **kwargs: bot.send_message(ADMIN_CHAT_ID, text, **kwargs)),
        "<b>–ì–æ–ª–æ—Å–∞:</b>\n" + "\n".join(results) + f"\n\n<b>{names[most_voted]} –≤—ã–±—ã–ª –∏–∑ –∏–≥—Ä—ã!</b>"
    )
    mafia_alive = sum([game['roles'][i] == '–º–∞—Ñ–∏—è' and game['alive'][i] for i in range(len(names))])
    city_alive = sum([game['roles'][i] == '–º–∏—Ä–Ω—ã–π' and game['alive'][i] for i in range(len(names))])
    if mafia_alive == 0:
        await try_send_html(
            message,
            "–ú–∏—Ä–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.",
            reply_markup=remove_keyboard()
        )
        await try_send_html(
            types.SimpleNamespace(answer=lambda text, **kwargs: bot.send_message(ADMIN_CHAT_ID, text, **kwargs)),
            "–ú–∏—Ä–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞."
        )
        game['state'] = 'over'
        return
    elif city_alive <= mafia_alive:
        await try_send_html(
            message,
            "–ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.",
            reply_markup=remove_keyboard()
        )
        await try_send_html(
            types.SimpleNamespace(answer=lambda text, **kwargs: bot.send_message(ADMIN_CHAT_ID, text, **kwargs)),
            "–ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞."
        )
        game['state'] = 'over'
        return
    else:
        await try_send_html(
            message,
            "–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–≥. –í–≤–µ–¥–∏—Ç–µ '–î–∞–ª–µ–µ'.",
            reply_markup=get_next_button()
        )
        await try_send_html(
            types.SimpleNamespace(answer=lambda text, **kwargs: bot.send_message(ADMIN_CHAT_ID, text, **kwargs)),
            "–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–≥. –í–≤–µ–¥–∏—Ç–µ '–î–∞–ª–µ–µ'."
        )

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
